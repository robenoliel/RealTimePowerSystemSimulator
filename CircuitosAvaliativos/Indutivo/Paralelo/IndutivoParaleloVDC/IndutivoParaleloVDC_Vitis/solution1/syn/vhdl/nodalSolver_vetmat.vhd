-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nodalSolver_vetmat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    G_vec_I_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    G_vec_I_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_vec_I_1_o_ap_vld : OUT STD_LOGIC;
    G_vec_I_2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    G_vec_I_2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_vec_I_2_o_ap_vld : OUT STD_LOGIC;
    G_vec_I_3_i : IN STD_LOGIC_VECTOR (31 downto 0);
    G_vec_I_3_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_vec_I_3_o_ap_vld : OUT STD_LOGIC;
    G_vec_V_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_vec_V_0_ap_vld : OUT STD_LOGIC;
    G_vec_V_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_vec_V_1_ap_vld : OUT STD_LOGIC;
    G_vec_V_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_vec_V_2_ap_vld : OUT STD_LOGIC;
    grp_fu_165_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_165_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_165_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_165_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_165_p_ce : OUT STD_LOGIC;
    grp_fu_170_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_170_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_170_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_170_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_170_p_ce : OUT STD_LOGIC;
    grp_fu_175_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_175_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_175_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_175_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_175_p_ce : OUT STD_LOGIC;
    grp_fu_720_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_720_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_720_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_720_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_720_p_ce : OUT STD_LOGIC;
    grp_fu_724_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_724_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_724_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_724_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_724_p_ce : OUT STD_LOGIC;
    grp_fu_728_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_728_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_728_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_728_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_728_p_ce : OUT STD_LOGIC;
    grp_fu_732_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_732_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_732_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_732_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_732_p_ce : OUT STD_LOGIC;
    grp_fu_736_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_736_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_736_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_736_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_736_p_ce : OUT STD_LOGIC;
    grp_fu_740_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_740_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_740_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_740_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_740_p_ce : OUT STD_LOGIC;
    grp_fu_180_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_180_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_180_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_180_p_ce : OUT STD_LOGIC;
    grp_fu_185_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_185_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_185_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_185_p_ce : OUT STD_LOGIC;
    grp_fu_190_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_190_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_190_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_190_p_ce : OUT STD_LOGIC;
    grp_fu_744_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_744_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_744_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_744_p_ce : OUT STD_LOGIC;
    grp_fu_748_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_748_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_748_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_748_p_ce : OUT STD_LOGIC;
    grp_fu_752_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_752_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_752_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_752_p_ce : OUT STD_LOGIC;
    grp_fu_756_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_756_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_756_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_756_p_ce : OUT STD_LOGIC;
    grp_fu_760_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_760_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_760_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_760_p_ce : OUT STD_LOGIC );
end;


architecture behav of nodalSolver_vetmat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_411E71A0 : STD_LOGIC_VECTOR (31 downto 0) := "01000001000111100111000110100000";
    constant ap_const_lv32_411B9D50 : STD_LOGIC_VECTOR (31 downto 0) := "01000001000110111001110101010000";
    constant ap_const_lv32_41DB4665 : STD_LOGIC_VECTOR (31 downto 0) := "01000001110110110100011001100101";
    constant ap_const_lv32_3F7D829A : STD_LOGIC_VECTOR (31 downto 0) := "00111111011111011000001010011010";
    constant ap_const_lv32_3F78FBB3 : STD_LOGIC_VECTOR (31 downto 0) := "00111111011110001111101110110011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal grp_fu_71_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_0_1_reg_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_76_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_1_reg_179 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_81_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_2_1_reg_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_32_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_1_0_1_reg_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_86_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_0_2_reg_201 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_37_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_1_1_1_reg_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_91_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_2_reg_211 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_42_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_1_2_1_reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_96_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_2_2_reg_221 : STD_LOGIC_VECTOR (31 downto 0);
    signal G_vec_I_3_load_reg_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal G_vec_I_3_load_reg_226_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal G_vec_I_3_load_reg_226_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_47_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_1_0_2_reg_233 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_51_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_1_1_2_reg_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_101_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_3_reg_243 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_55_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_1_2_2_reg_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_106_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_2_3_reg_253 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal grp_fu_59_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_63_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_67_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_32_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_32_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_37_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_37_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_42_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_42_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_47_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_47_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_51_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_51_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_55_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_55_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_59_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_59_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_63_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_63_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_67_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_67_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_71_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_71_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_76_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_76_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_81_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_81_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_86_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_86_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_91_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_91_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_96_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_96_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_101_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_101_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_106_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_106_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_32_ce : STD_LOGIC;
    signal grp_fu_37_ce : STD_LOGIC;
    signal grp_fu_42_ce : STD_LOGIC;
    signal grp_fu_47_ce : STD_LOGIC;
    signal grp_fu_51_ce : STD_LOGIC;
    signal grp_fu_55_ce : STD_LOGIC;
    signal grp_fu_59_ce : STD_LOGIC;
    signal grp_fu_63_ce : STD_LOGIC;
    signal grp_fu_67_ce : STD_LOGIC;
    signal grp_fu_71_ce : STD_LOGIC;
    signal grp_fu_76_ce : STD_LOGIC;
    signal grp_fu_81_ce : STD_LOGIC;
    signal grp_fu_86_ce : STD_LOGIC;
    signal grp_fu_91_ce : STD_LOGIC;
    signal grp_fu_96_ce : STD_LOGIC;
    signal grp_fu_101_ce : STD_LOGIC;
    signal grp_fu_106_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to13 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component nodalSolver_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nodalSolver_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                G_vec_I_3_load_reg_226 <= G_vec_I_3_i;
                G_vec_I_3_load_reg_226_pp0_iter10_reg <= G_vec_I_3_load_reg_226_pp0_iter9_reg;
                G_vec_I_3_load_reg_226_pp0_iter9_reg <= G_vec_I_3_load_reg_226;
                acc_1_0_1_reg_196 <= grp_fu_165_p_dout0;
                acc_1_0_2_reg_233 <= grp_fu_720_p_dout0;
                acc_1_1_1_reg_206 <= grp_fu_170_p_dout0;
                acc_1_1_2_reg_238 <= grp_fu_724_p_dout0;
                acc_1_2_1_reg_216 <= grp_fu_175_p_dout0;
                acc_1_2_2_reg_248 <= grp_fu_728_p_dout0;
                mul_0_1_reg_174 <= grp_fu_180_p_dout0;
                mul_0_2_reg_201 <= grp_fu_744_p_dout0;
                mul_1_1_reg_179 <= grp_fu_185_p_dout0;
                mul_1_2_reg_211 <= grp_fu_748_p_dout0;
                mul_1_3_reg_243 <= grp_fu_756_p_dout0;
                mul_2_1_reg_184 <= grp_fu_190_p_dout0;
                mul_2_2_reg_221 <= grp_fu_752_p_dout0;
                mul_2_3_reg_253 <= grp_fu_760_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    G_vec_I_1_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, G_vec_I_1_i)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            G_vec_I_1_o <= ap_const_lv32_0;
        else 
            G_vec_I_1_o <= G_vec_I_1_i;
        end if; 
    end process;


    G_vec_I_1_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            G_vec_I_1_o_ap_vld <= ap_const_logic_1;
        else 
            G_vec_I_1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    G_vec_I_2_o_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, G_vec_I_2_i)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            G_vec_I_2_o <= ap_const_lv32_0;
        else 
            G_vec_I_2_o <= G_vec_I_2_i;
        end if; 
    end process;


    G_vec_I_2_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            G_vec_I_2_o_ap_vld <= ap_const_logic_1;
        else 
            G_vec_I_2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    G_vec_I_3_o_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, G_vec_I_3_i)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            G_vec_I_3_o <= ap_const_lv32_0;
        else 
            G_vec_I_3_o <= G_vec_I_3_i;
        end if; 
    end process;


    G_vec_I_3_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            G_vec_I_3_o_ap_vld <= ap_const_logic_1;
        else 
            G_vec_I_3_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    G_vec_V_0 <= grp_fu_732_p_dout0;

    G_vec_V_0_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            G_vec_V_0_ap_vld <= ap_const_logic_1;
        else 
            G_vec_V_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    G_vec_V_1 <= grp_fu_736_p_dout0;

    G_vec_V_1_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            G_vec_V_1_ap_vld <= ap_const_logic_1;
        else 
            G_vec_V_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    G_vec_V_2 <= grp_fu_740_p_dout0;

    G_vec_V_2_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            G_vec_V_2_ap_vld <= ap_const_logic_1;
        else 
            G_vec_V_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to13_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to13 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to13)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to13 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_101_ce <= ap_const_logic_1;
    grp_fu_101_p0 <= G_vec_I_3_i;
    grp_fu_101_p1 <= ap_const_lv32_3F7D829A;
    grp_fu_101_p2 <= grp_fu_756_p_dout0;
    grp_fu_106_ce <= ap_const_logic_1;
    grp_fu_106_p0 <= G_vec_I_3_i;
    grp_fu_106_p1 <= ap_const_lv32_3F78FBB3;
    grp_fu_106_p2 <= grp_fu_760_p_dout0;
    grp_fu_165_p_ce <= ap_const_logic_1;
    grp_fu_165_p_din0 <= mul_0_1_reg_174;
    grp_fu_165_p_din1 <= ap_const_lv32_0;
    grp_fu_165_p_opcode <= ap_const_lv2_0;
    grp_fu_170_p_ce <= ap_const_logic_1;
    grp_fu_170_p_din0 <= mul_1_1_reg_179;
    grp_fu_170_p_din1 <= ap_const_lv32_0;
    grp_fu_170_p_opcode <= ap_const_lv2_0;
    grp_fu_175_p_ce <= ap_const_logic_1;
    grp_fu_175_p_din0 <= mul_2_1_reg_184;
    grp_fu_175_p_din1 <= ap_const_lv32_0;
    grp_fu_175_p_opcode <= ap_const_lv2_0;
    grp_fu_180_p_ce <= ap_const_logic_1;
    grp_fu_180_p_din0 <= G_vec_I_1_i;
    grp_fu_180_p_din1 <= ap_const_lv32_0;
    grp_fu_185_p_ce <= ap_const_logic_1;
    grp_fu_185_p_din0 <= G_vec_I_1_i;
    grp_fu_185_p_din1 <= ap_const_lv32_411E71A0;
    grp_fu_190_p_ce <= ap_const_logic_1;
    grp_fu_190_p_din0 <= G_vec_I_1_i;
    grp_fu_190_p_din1 <= ap_const_lv32_411B9D50;
    grp_fu_32_ce <= ap_const_logic_1;
    grp_fu_32_p0 <= mul_0_1_reg_174;
    grp_fu_32_p1 <= ap_const_lv32_0;
    grp_fu_32_p2 <= grp_fu_165_p_dout0;
    grp_fu_37_ce <= ap_const_logic_1;
    grp_fu_37_p0 <= mul_1_1_reg_179;
    grp_fu_37_p1 <= ap_const_lv32_0;
    grp_fu_37_p2 <= grp_fu_170_p_dout0;
    grp_fu_42_ce <= ap_const_logic_1;
    grp_fu_42_p0 <= mul_2_1_reg_184;
    grp_fu_42_p1 <= ap_const_lv32_0;
    grp_fu_42_p2 <= grp_fu_175_p_dout0;
    grp_fu_47_ce <= ap_const_logic_1;
    grp_fu_47_p0 <= acc_1_0_1_reg_196;
    grp_fu_47_p1 <= mul_0_2_reg_201;
    grp_fu_47_p2 <= grp_fu_720_p_dout0;
    grp_fu_51_ce <= ap_const_logic_1;
    grp_fu_51_p0 <= acc_1_1_1_reg_206;
    grp_fu_51_p1 <= mul_1_2_reg_211;
    grp_fu_51_p2 <= grp_fu_724_p_dout0;
    grp_fu_55_ce <= ap_const_logic_1;
    grp_fu_55_p0 <= acc_1_2_1_reg_216;
    grp_fu_55_p1 <= mul_2_2_reg_221;
    grp_fu_55_p2 <= grp_fu_728_p_dout0;
    grp_fu_59_ce <= ap_const_logic_1;
    grp_fu_59_p0 <= acc_1_0_2_reg_233;
    grp_fu_59_p1 <= G_vec_I_3_load_reg_226_pp0_iter10_reg;
    grp_fu_59_p2 <= grp_fu_732_p_dout0;
    grp_fu_63_ce <= ap_const_logic_1;
    grp_fu_63_p0 <= acc_1_1_2_reg_238;
    grp_fu_63_p1 <= mul_1_3_reg_243;
    grp_fu_63_p2 <= grp_fu_736_p_dout0;
    grp_fu_67_ce <= ap_const_logic_1;
    grp_fu_67_p0 <= acc_1_2_2_reg_248;
    grp_fu_67_p1 <= mul_2_3_reg_253;
    grp_fu_67_p2 <= grp_fu_740_p_dout0;
    grp_fu_71_ce <= ap_const_logic_1;
    grp_fu_71_p0 <= G_vec_I_1_i;
    grp_fu_71_p1 <= ap_const_lv32_0;
    grp_fu_71_p2 <= grp_fu_180_p_dout0;
    grp_fu_720_p_ce <= ap_const_logic_1;
    grp_fu_720_p_din0 <= acc_1_0_1_reg_196;
    grp_fu_720_p_din1 <= mul_0_2_reg_201;
    grp_fu_720_p_opcode <= ap_const_lv2_0;
    grp_fu_724_p_ce <= ap_const_logic_1;
    grp_fu_724_p_din0 <= acc_1_1_1_reg_206;
    grp_fu_724_p_din1 <= mul_1_2_reg_211;
    grp_fu_724_p_opcode <= ap_const_lv2_0;
    grp_fu_728_p_ce <= ap_const_logic_1;
    grp_fu_728_p_din0 <= acc_1_2_1_reg_216;
    grp_fu_728_p_din1 <= mul_2_2_reg_221;
    grp_fu_728_p_opcode <= ap_const_lv2_0;
    grp_fu_732_p_ce <= ap_const_logic_1;
    grp_fu_732_p_din0 <= acc_1_0_2_reg_233;
    grp_fu_732_p_din1 <= G_vec_I_3_load_reg_226_pp0_iter10_reg;
    grp_fu_732_p_opcode <= ap_const_lv2_0;
    grp_fu_736_p_ce <= ap_const_logic_1;
    grp_fu_736_p_din0 <= acc_1_1_2_reg_238;
    grp_fu_736_p_din1 <= mul_1_3_reg_243;
    grp_fu_736_p_opcode <= ap_const_lv2_0;
    grp_fu_740_p_ce <= ap_const_logic_1;
    grp_fu_740_p_din0 <= acc_1_2_2_reg_248;
    grp_fu_740_p_din1 <= mul_2_3_reg_253;
    grp_fu_740_p_opcode <= ap_const_lv2_0;
    grp_fu_744_p_ce <= ap_const_logic_1;
    grp_fu_744_p_din0 <= G_vec_I_2_i;
    grp_fu_744_p_din1 <= ap_const_lv32_0;
    grp_fu_748_p_ce <= ap_const_logic_1;
    grp_fu_748_p_din0 <= G_vec_I_2_i;
    grp_fu_748_p_din1 <= ap_const_lv32_411B9D50;
    grp_fu_752_p_ce <= ap_const_logic_1;
    grp_fu_752_p_din0 <= G_vec_I_2_i;
    grp_fu_752_p_din1 <= ap_const_lv32_41DB4665;
    grp_fu_756_p_ce <= ap_const_logic_1;
    grp_fu_756_p_din0 <= G_vec_I_3_i;
    grp_fu_756_p_din1 <= ap_const_lv32_3F7D829A;
    grp_fu_760_p_ce <= ap_const_logic_1;
    grp_fu_760_p_din0 <= G_vec_I_3_i;
    grp_fu_760_p_din1 <= ap_const_lv32_3F78FBB3;
    grp_fu_76_ce <= ap_const_logic_1;
    grp_fu_76_p0 <= G_vec_I_1_i;
    grp_fu_76_p1 <= ap_const_lv32_411E71A0;
    grp_fu_76_p2 <= grp_fu_185_p_dout0;
    grp_fu_81_ce <= ap_const_logic_1;
    grp_fu_81_p0 <= G_vec_I_1_i;
    grp_fu_81_p1 <= ap_const_lv32_411B9D50;
    grp_fu_81_p2 <= grp_fu_190_p_dout0;
    grp_fu_86_ce <= ap_const_logic_1;
    grp_fu_86_p0 <= G_vec_I_2_i;
    grp_fu_86_p1 <= ap_const_lv32_0;
    grp_fu_86_p2 <= grp_fu_744_p_dout0;
    grp_fu_91_ce <= ap_const_logic_1;
    grp_fu_91_p0 <= G_vec_I_2_i;
    grp_fu_91_p1 <= ap_const_lv32_411B9D50;
    grp_fu_91_p2 <= grp_fu_748_p_dout0;
    grp_fu_96_ce <= ap_const_logic_1;
    grp_fu_96_p0 <= G_vec_I_2_i;
    grp_fu_96_p1 <= ap_const_lv32_41DB4665;
    grp_fu_96_p2 <= grp_fu_752_p_dout0;
end behav;
