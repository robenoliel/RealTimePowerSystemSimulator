-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nodalSolver_sin_or_cos_double_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    t_in : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of nodalSolver_sin_or_cos_double_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_44D : STD_LOGIC_VECTOR (10 downto 0) := "10001001101";
    constant ap_const_lv11_4A : STD_LOGIC_VECTOR (10 downto 0) := "00001001010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_A6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100110";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101001";
    constant ap_const_lv11_403 : STD_LOGIC_VECTOR (10 downto 0) := "10000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv124_0 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv63_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (62 downto 0) := "111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv17_10000 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv12_3FF : STD_LOGIC_VECTOR (11 downto 0) := "001111111111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ref_4oPi_table_256_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_4oPi_table_256_V_ce0 : STD_LOGIC;
    signal ref_4oPi_table_256_V_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal fourth_order_double_sin_cos_K0_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_sin_cos_K0_V_ce0 : STD_LOGIC;
    signal fourth_order_double_sin_cos_K0_V_q0 : STD_LOGIC_VECTOR (58 downto 0);
    signal fourth_order_double_sin_cos_K1_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_sin_cos_K1_V_ce0 : STD_LOGIC;
    signal fourth_order_double_sin_cos_K1_V_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal fourth_order_double_sin_cos_K2_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_sin_cos_K2_V_ce0 : STD_LOGIC;
    signal fourth_order_double_sin_cos_K2_V_q0 : STD_LOGIC_VECTOR (43 downto 0);
    signal fourth_order_double_sin_cos_K3_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_sin_cos_K3_V_ce0 : STD_LOGIC;
    signal fourth_order_double_sin_cos_K3_V_q0 : STD_LOGIC_VECTOR (32 downto 0);
    signal fourth_order_double_sin_cos_K4_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_sin_cos_K4_V_ce0 : STD_LOGIC;
    signal fourth_order_double_sin_cos_K4_V_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Result_21_reg_1457 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_21_reg_1457_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_21_reg_1457_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_21_reg_1457_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_306_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_14_reg_1463 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_14_reg_1463_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_14_reg_1463_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_14_reg_1463_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_15_fu_316_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_15_reg_1470 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_15_reg_1470_pp0_iter1_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal closepath_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1476 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1476_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1476_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1476_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln628_fu_355_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln628_reg_1488 : STD_LOGIC_VECTOR (6 downto 0);
    signal Med_V_reg_1493 : STD_LOGIC_VECTOR (169 downto 0);
    signal icmp_ln824_1_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_1_reg_1503 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_1_reg_1503_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_1_reg_1503_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_1_reg_1503_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_1_reg_1503_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_1_reg_1503_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_1_reg_1503_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_1_reg_1503_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_1_reg_1503_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_1_reg_1503_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_389_p2 : STD_LOGIC_VECTOR (169 downto 0);
    signal ret_reg_1509 : STD_LOGIC_VECTOR (169 downto 0);
    signal Mx_bits_V_reg_1514 : STD_LOGIC_VECTOR (123 downto 0);
    signal k_V_reg_1521 : STD_LOGIC_VECTOR (2 downto 0);
    signal Mx_V_reg_1526 : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1526_pp0_iter5_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1526_pp0_iter6_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1526_pp0_iter7_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1526_pp0_iter8_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Ex_V_3_fu_534_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1533 : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1533_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1533_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1533_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1533_pp0_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1533_pp0_iter9_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1533_pp0_iter10_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_reg_1539 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_fu_548_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1545 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1545_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1545_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1545_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1545_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1545_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1545_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_reg_1552 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_reg_1552_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_reg_1552_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_reg_1552_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_reg_1552_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_reg_1552_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_reg_1552_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_reg_1552_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1557 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1557_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1557_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1557_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1557_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1557_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1557_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1557_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_2_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_2_reg_1563 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_2_reg_1563_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_2_reg_1563_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_2_reg_1563_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_2_reg_1563_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_2_reg_1563_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_2_reg_1563_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_2_reg_1563_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_fu_688_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_reg_1570 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_reg_1570_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_reg_1570_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_reg_1570_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_reg_1570_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_reg_1570_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_reg_1570_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_reg_1570_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal B_fu_746_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal B_reg_1575 : STD_LOGIC_VECTOR (55 downto 0);
    signal B_reg_1575_pp0_iter6_reg : STD_LOGIC_VECTOR (55 downto 0);
    signal B_trunc_reg_1580 : STD_LOGIC_VECTOR (48 downto 0);
    signal zext_ln488_fu_773_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln488_reg_1585 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln488_reg_1585_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1070_fu_778_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal zext_ln1070_reg_1598 : STD_LOGIC_VECTOR (97 downto 0);
    signal B_squared_reg_1603 : STD_LOGIC_VECTOR (48 downto 0);
    signal fourth_order_double_sin_cos_K1_V_load_reg_1609 : STD_LOGIC_VECTOR (51 downto 0);
    signal rhs_1_reg_1624 : STD_LOGIC_VECTOR (55 downto 0);
    signal rhs_2_reg_1629 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln1_reg_1634 : STD_LOGIC_VECTOR (41 downto 0);
    signal trunc_ln1069_1_reg_1644 : STD_LOGIC_VECTOR (34 downto 0);
    signal rhs_4_reg_1654 : STD_LOGIC_VECTOR (28 downto 0);
    signal ret_V_5_fu_936_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_5_reg_1659 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2_reg_1664 : STD_LOGIC_VECTOR (36 downto 0);
    signal Mx_V_2_fu_952_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_2_reg_1669 : STD_LOGIC_VECTOR (62 downto 0);
    signal ret_V_fu_969_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_reg_1674 : STD_LOGIC_VECTOR (63 downto 0);
    signal result_V_reg_1679 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_15_i_reg_1685 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_15_1_i_reg_1690 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_15_2_i_reg_1695 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_i_reg_1700 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_2_i_fu_1121_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_reg_1705 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_fu_1139_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_reg_1710 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1253_fu_1151_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln1253_reg_1715 : STD_LOGIC_VECTOR (62 downto 0);
    signal icmp_ln453_fu_1156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln453_reg_1720 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln1253_1_fu_1172_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln1253_1_reg_1725 : STD_LOGIC_VECTOR (62 downto 0);
    signal and_ln453_fu_1208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln453_reg_1731 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln453_2_fu_1220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln453_2_reg_1736 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln462_fu_1285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln462_reg_1741 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_exp_V_fu_1315_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal results_exp_V_reg_1748 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln662_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_fu_294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln116_fu_326_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal addr_fu_332_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_s_fu_340_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln735_fu_359_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal r_2_fu_362_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal p_Result_22_fu_378_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_389_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal Ex_V_fu_419_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_fu_431_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_bits_V_1_fu_438_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal select_ln520_fu_443_p3 : STD_LOGIC_VECTOR (123 downto 0);
    signal Mx_bits_V_3_fu_456_p3 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Result_2_fu_462_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal p_Result_23_fu_472_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_4_fu_480_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_24_fu_490_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_498_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal Mx_zeros_fu_506_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1253_fu_514_p1 : STD_LOGIC_VECTOR (123 downto 0);
    signal r_fu_518_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal select_ln482_fu_424_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln646_fu_510_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln832_fu_450_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_26_fu_570_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_577_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_615_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_1_fu_653_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln311_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln311_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1334_fu_695_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_698_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_704_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_cast_cast_cast_fu_711_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_prom_i_i_i_i_cast_cast_cast_cast_fu_715_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_fu_719_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_1_fu_724_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_14_fu_729_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal sin_basis_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_fu_736_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_25_fu_765_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_3_fu_781_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_3_fu_781_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_3_fu_781_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal r_V_4_fu_800_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal zext_ln662_1_fu_797_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal r_V_4_fu_800_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_6_fu_805_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_6_fu_805_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_8_fu_817_p0 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_8_fu_817_p2 : STD_LOGIC_VECTOR (107 downto 0);
    signal r_V_9_fu_840_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_9_fu_840_p2 : STD_LOGIC_VECTOR (92 downto 0);
    signal r_V_4_fu_800_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal r_V_6_fu_805_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal r_V_10_fu_891_p0 : STD_LOGIC_VECTOR (41 downto 0);
    signal r_V_10_fu_891_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_11_fu_904_p0 : STD_LOGIC_VECTOR (34 downto 0);
    signal r_V_11_fu_904_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_11_fu_904_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal t1_fu_876_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln657_fu_920_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln657_1_fu_924_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_4_fu_927_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1146_fu_933_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_10_fu_891_p2 : STD_LOGIC_VECTOR (74 downto 0);
    signal zext_ln1146_fu_958_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_6_fu_961_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1146_1_fu_966_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_13_fu_981_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_13_fu_981_p2 : STD_LOGIC_VECTOR (125 downto 0);
    signal Ex_V_4_fu_1037_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_3_i_fu_1047_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_20_i_fu_1075_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_1_i_fu_1054_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_20_1_i_fu_1093_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_2_i_fu_1061_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_20_2_i_fu_1111_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_fu_1068_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_20_3_i_fu_1129_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_1085_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_prom_i_i_0_i_fu_1147_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_1_i_fu_1103_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_prom_i_i_1_i_fu_1168_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln451_fu_1162_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln451_1_fu_1184_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln453_1_fu_1178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln453_fu_1202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln453_2_fu_1190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln453_1_fu_1214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln451_2_fu_1196_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln453_fu_1234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln453_fu_1226_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln453_1_fu_1240_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln169_fu_1043_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln461_fu_1256_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln461_fu_1262_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln453_2_fu_1248_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newexp_fu_1266_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_1272_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_fu_1280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln311_fu_1302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln311_1_fu_1295_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln255_fu_1291_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln311_fu_1307_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sh_prom_i_i_2_i_fu_1322_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln1253_2_fu_1325_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal sh_prom_i_i_3_i_fu_1330_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln1253_3_fu_1333_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_4_fu_1347_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_5_fu_1364_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_6_fu_1373_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln462_1_fu_1339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln462_fu_1357_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal select_ln462_1_fu_1383_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln462_2_fu_1343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln462_2_fu_1390_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_7_fu_1398_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal and_ln300_1_fu_1415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln300_fu_1419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_fu_1433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln300_2_fu_1425_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal significand_fu_1407_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal results_sig_V_fu_1437_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_27_fu_1445_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to11 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_389_p10 : STD_LOGIC_VECTOR (169 downto 0);
    signal r_V_10_fu_891_p00 : STD_LOGIC_VECTOR (74 downto 0);
    signal r_V_10_fu_891_p10 : STD_LOGIC_VECTOR (74 downto 0);
    signal r_V_11_fu_904_p00 : STD_LOGIC_VECTOR (59 downto 0);
    signal r_V_11_fu_904_p10 : STD_LOGIC_VECTOR (59 downto 0);
    signal r_V_13_fu_981_p10 : STD_LOGIC_VECTOR (125 downto 0);
    signal r_V_8_fu_817_p00 : STD_LOGIC_VECTOR (107 downto 0);
    signal r_V_9_fu_840_p00 : STD_LOGIC_VECTOR (92 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component nodalSolver_mul_170s_53ns_170_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (169 downto 0);
        din1 : IN STD_LOGIC_VECTOR (52 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (169 downto 0) );
    end component;


    component nodalSolver_mux_83_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component nodalSolver_mux_164_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component nodalSolver_mul_49ns_49ns_98_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (48 downto 0);
        din1 : IN STD_LOGIC_VECTOR (48 downto 0);
        dout : OUT STD_LOGIC_VECTOR (97 downto 0) );
    end component;


    component nodalSolver_mul_56ns_52s_108_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (55 downto 0);
        din1 : IN STD_LOGIC_VECTOR (51 downto 0);
        dout : OUT STD_LOGIC_VECTOR (107 downto 0) );
    end component;


    component nodalSolver_mul_49ns_44s_93_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (48 downto 0);
        din1 : IN STD_LOGIC_VECTOR (43 downto 0);
        dout : OUT STD_LOGIC_VECTOR (92 downto 0) );
    end component;


    component nodalSolver_mul_42ns_33ns_75_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (41 downto 0);
        din1 : IN STD_LOGIC_VECTOR (32 downto 0);
        dout : OUT STD_LOGIC_VECTOR (74 downto 0) );
    end component;


    component nodalSolver_mul_35ns_25ns_60_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (34 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        dout : OUT STD_LOGIC_VECTOR (59 downto 0) );
    end component;


    component nodalSolver_mul_64s_63ns_126_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (62 downto 0);
        dout : OUT STD_LOGIC_VECTOR (125 downto 0) );
    end component;


    component nodalSolver_sin_or_cos_double_s_ref_4oPi_table_256_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component nodalSolver_sin_or_cos_double_s_fourth_order_double_sin_cos_K0_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (58 downto 0) );
    end component;


    component nodalSolver_sin_or_cos_double_s_fourth_order_double_sin_cos_K1_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component nodalSolver_sin_or_cos_double_s_fourth_order_double_sin_cos_K2_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component nodalSolver_sin_or_cos_double_s_fourth_order_double_sin_cos_K3_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component nodalSolver_sin_or_cos_double_s_fourth_order_double_sin_cos_K4_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    ref_4oPi_table_256_V_U : component nodalSolver_sin_or_cos_double_s_ref_4oPi_table_256_V
    generic map (
        DataWidth => 256,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ref_4oPi_table_256_V_address0,
        ce0 => ref_4oPi_table_256_V_ce0,
        q0 => ref_4oPi_table_256_V_q0);

    fourth_order_double_sin_cos_K0_V_U : component nodalSolver_sin_or_cos_double_s_fourth_order_double_sin_cos_K0_V
    generic map (
        DataWidth => 59,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_sin_cos_K0_V_address0,
        ce0 => fourth_order_double_sin_cos_K0_V_ce0,
        q0 => fourth_order_double_sin_cos_K0_V_q0);

    fourth_order_double_sin_cos_K1_V_U : component nodalSolver_sin_or_cos_double_s_fourth_order_double_sin_cos_K1_V
    generic map (
        DataWidth => 52,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_sin_cos_K1_V_address0,
        ce0 => fourth_order_double_sin_cos_K1_V_ce0,
        q0 => fourth_order_double_sin_cos_K1_V_q0);

    fourth_order_double_sin_cos_K2_V_U : component nodalSolver_sin_or_cos_double_s_fourth_order_double_sin_cos_K2_V
    generic map (
        DataWidth => 44,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_sin_cos_K2_V_address0,
        ce0 => fourth_order_double_sin_cos_K2_V_ce0,
        q0 => fourth_order_double_sin_cos_K2_V_q0);

    fourth_order_double_sin_cos_K3_V_U : component nodalSolver_sin_or_cos_double_s_fourth_order_double_sin_cos_K3_V
    generic map (
        DataWidth => 33,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_sin_cos_K3_V_address0,
        ce0 => fourth_order_double_sin_cos_K3_V_ce0,
        q0 => fourth_order_double_sin_cos_K3_V_q0);

    fourth_order_double_sin_cos_K4_V_U : component nodalSolver_sin_or_cos_double_s_fourth_order_double_sin_cos_K4_V
    generic map (
        DataWidth => 25,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_sin_cos_K4_V_address0,
        ce0 => fourth_order_double_sin_cos_K4_V_ce0,
        q0 => fourth_order_double_sin_cos_K4_V_q0);

    mul_170s_53ns_170_2_1_U1 : component nodalSolver_mul_170s_53ns_170_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 170,
        din1_WIDTH => 53,
        dout_WIDTH => 170)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Med_V_reg_1493,
        din1 => grp_fu_389_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_389_p2);

    mux_83_1_1_1_U2 : component nodalSolver_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_1,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => select_ln832_fu_450_p3,
        dout => cos_basis_fu_548_p10);

    mux_164_1_1_1_U3 : component nodalSolver_mux_164_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_26_fu_570_p3,
        dout => tmp_s_fu_577_p18);

    mux_164_1_1_1_U4 : component nodalSolver_mux_164_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_0,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_0,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_26_fu_570_p3,
        dout => tmp_1_fu_615_p18);

    mul_49ns_49ns_98_1_1_U5 : component nodalSolver_mul_49ns_49ns_98_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        din0 => r_V_3_fu_781_p0,
        din1 => r_V_3_fu_781_p1,
        dout => r_V_3_fu_781_p2);

    mul_49ns_49ns_98_1_1_U6 : component nodalSolver_mul_49ns_49ns_98_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        din0 => r_V_4_fu_800_p0,
        din1 => r_V_4_fu_800_p1,
        dout => r_V_4_fu_800_p2);

    mul_49ns_49ns_98_1_1_U7 : component nodalSolver_mul_49ns_49ns_98_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        din0 => r_V_6_fu_805_p0,
        din1 => r_V_6_fu_805_p1,
        dout => r_V_6_fu_805_p2);

    mul_56ns_52s_108_1_1_U8 : component nodalSolver_mul_56ns_52s_108_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 56,
        din1_WIDTH => 52,
        dout_WIDTH => 108)
    port map (
        din0 => r_V_8_fu_817_p0,
        din1 => fourth_order_double_sin_cos_K1_V_load_reg_1609,
        dout => r_V_8_fu_817_p2);

    mul_49ns_44s_93_1_1_U9 : component nodalSolver_mul_49ns_44s_93_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 49,
        din1_WIDTH => 44,
        dout_WIDTH => 93)
    port map (
        din0 => r_V_9_fu_840_p0,
        din1 => fourth_order_double_sin_cos_K2_V_q0,
        dout => r_V_9_fu_840_p2);

    mul_42ns_33ns_75_1_1_U10 : component nodalSolver_mul_42ns_33ns_75_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 42,
        din1_WIDTH => 33,
        dout_WIDTH => 75)
    port map (
        din0 => r_V_10_fu_891_p0,
        din1 => r_V_10_fu_891_p1,
        dout => r_V_10_fu_891_p2);

    mul_35ns_25ns_60_1_1_U11 : component nodalSolver_mul_35ns_25ns_60_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 35,
        din1_WIDTH => 25,
        dout_WIDTH => 60)
    port map (
        din0 => r_V_11_fu_904_p0,
        din1 => r_V_11_fu_904_p1,
        dout => r_V_11_fu_904_p2);

    mul_64s_63ns_126_1_1_U12 : component nodalSolver_mul_64s_63ns_126_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 63,
        dout_WIDTH => 126)
    port map (
        din0 => ret_V_reg_1674,
        din1 => r_V_13_fu_981_p1,
        dout => r_V_13_fu_981_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                B_reg_1575 <= B_fu_746_p1;
                B_reg_1575_pp0_iter6_reg <= B_reg_1575;
                B_squared_reg_1603 <= r_V_3_fu_781_p2(97 downto 49);
                B_trunc_reg_1580 <= r_V_14_fu_729_p3(55 downto 7);
                Ex_V_3_reg_1533 <= Ex_V_3_fu_534_p2;
                Ex_V_3_reg_1533_pp0_iter10_reg <= Ex_V_3_reg_1533_pp0_iter9_reg;
                Ex_V_3_reg_1533_pp0_iter5_reg <= Ex_V_3_reg_1533;
                Ex_V_3_reg_1533_pp0_iter6_reg <= Ex_V_3_reg_1533_pp0_iter5_reg;
                Ex_V_3_reg_1533_pp0_iter7_reg <= Ex_V_3_reg_1533_pp0_iter6_reg;
                Ex_V_3_reg_1533_pp0_iter8_reg <= Ex_V_3_reg_1533_pp0_iter7_reg;
                Ex_V_3_reg_1533_pp0_iter9_reg <= Ex_V_3_reg_1533_pp0_iter8_reg;
                Mx_V_2_reg_1669 <= Mx_V_2_fu_952_p3;
                Mx_V_reg_1526 <= r_fu_518_p2(123 downto 61);
                Mx_V_reg_1526_pp0_iter5_reg <= Mx_V_reg_1526;
                Mx_V_reg_1526_pp0_iter6_reg <= Mx_V_reg_1526_pp0_iter5_reg;
                Mx_V_reg_1526_pp0_iter7_reg <= Mx_V_reg_1526_pp0_iter6_reg;
                Mx_V_reg_1526_pp0_iter8_reg <= Mx_V_reg_1526_pp0_iter7_reg;
                Mx_bits_V_reg_1514 <= grp_fu_389_p2(166 downto 43);
                and_ln300_reg_1557 <= and_ln300_fu_666_p2;
                and_ln300_reg_1557_pp0_iter10_reg <= and_ln300_reg_1557_pp0_iter9_reg;
                and_ln300_reg_1557_pp0_iter11_reg <= and_ln300_reg_1557_pp0_iter10_reg;
                and_ln300_reg_1557_pp0_iter5_reg <= and_ln300_reg_1557;
                and_ln300_reg_1557_pp0_iter6_reg <= and_ln300_reg_1557_pp0_iter5_reg;
                and_ln300_reg_1557_pp0_iter7_reg <= and_ln300_reg_1557_pp0_iter6_reg;
                and_ln300_reg_1557_pp0_iter8_reg <= and_ln300_reg_1557_pp0_iter7_reg;
                and_ln300_reg_1557_pp0_iter9_reg <= and_ln300_reg_1557_pp0_iter8_reg;
                and_ln453_2_reg_1736 <= and_ln453_2_fu_1220_p2;
                and_ln453_reg_1731 <= and_ln453_fu_1208_p2;
                closepath_reg_1476_pp0_iter2_reg <= closepath_reg_1476_pp0_iter1_reg;
                closepath_reg_1476_pp0_iter3_reg <= closepath_reg_1476_pp0_iter2_reg;
                cos_basis_reg_1545 <= cos_basis_fu_548_p10;
                cos_basis_reg_1545_pp0_iter10_reg <= cos_basis_reg_1545_pp0_iter9_reg;
                cos_basis_reg_1545_pp0_iter5_reg <= cos_basis_reg_1545;
                cos_basis_reg_1545_pp0_iter6_reg <= cos_basis_reg_1545_pp0_iter5_reg;
                cos_basis_reg_1545_pp0_iter7_reg <= cos_basis_reg_1545_pp0_iter6_reg;
                cos_basis_reg_1545_pp0_iter8_reg <= cos_basis_reg_1545_pp0_iter7_reg;
                cos_basis_reg_1545_pp0_iter9_reg <= cos_basis_reg_1545_pp0_iter8_reg;
                fourth_order_double_sin_cos_K1_V_load_reg_1609 <= fourth_order_double_sin_cos_K1_V_q0;
                icmp_ln453_reg_1720 <= icmp_ln453_fu_1156_p2;
                icmp_ln824_1_reg_1503 <= icmp_ln824_1_fu_394_p2;
                icmp_ln824_1_reg_1503_pp0_iter10_reg <= icmp_ln824_1_reg_1503_pp0_iter9_reg;
                icmp_ln824_1_reg_1503_pp0_iter11_reg <= icmp_ln824_1_reg_1503_pp0_iter10_reg;
                icmp_ln824_1_reg_1503_pp0_iter3_reg <= icmp_ln824_1_reg_1503;
                icmp_ln824_1_reg_1503_pp0_iter4_reg <= icmp_ln824_1_reg_1503_pp0_iter3_reg;
                icmp_ln824_1_reg_1503_pp0_iter5_reg <= icmp_ln824_1_reg_1503_pp0_iter4_reg;
                icmp_ln824_1_reg_1503_pp0_iter6_reg <= icmp_ln824_1_reg_1503_pp0_iter5_reg;
                icmp_ln824_1_reg_1503_pp0_iter7_reg <= icmp_ln824_1_reg_1503_pp0_iter6_reg;
                icmp_ln824_1_reg_1503_pp0_iter8_reg <= icmp_ln824_1_reg_1503_pp0_iter7_reg;
                icmp_ln824_1_reg_1503_pp0_iter9_reg <= icmp_ln824_1_reg_1503_pp0_iter8_reg;
                icmp_ln824_2_reg_1563 <= icmp_ln824_2_fu_671_p2;
                icmp_ln824_2_reg_1563_pp0_iter10_reg <= icmp_ln824_2_reg_1563_pp0_iter9_reg;
                icmp_ln824_2_reg_1563_pp0_iter11_reg <= icmp_ln824_2_reg_1563_pp0_iter10_reg;
                icmp_ln824_2_reg_1563_pp0_iter5_reg <= icmp_ln824_2_reg_1563;
                icmp_ln824_2_reg_1563_pp0_iter6_reg <= icmp_ln824_2_reg_1563_pp0_iter5_reg;
                icmp_ln824_2_reg_1563_pp0_iter7_reg <= icmp_ln824_2_reg_1563_pp0_iter6_reg;
                icmp_ln824_2_reg_1563_pp0_iter8_reg <= icmp_ln824_2_reg_1563_pp0_iter7_reg;
                icmp_ln824_2_reg_1563_pp0_iter9_reg <= icmp_ln824_2_reg_1563_pp0_iter8_reg;
                icmp_ln824_reg_1552 <= icmp_ln824_fu_661_p2;
                icmp_ln824_reg_1552_pp0_iter10_reg <= icmp_ln824_reg_1552_pp0_iter9_reg;
                icmp_ln824_reg_1552_pp0_iter11_reg <= icmp_ln824_reg_1552_pp0_iter10_reg;
                icmp_ln824_reg_1552_pp0_iter5_reg <= icmp_ln824_reg_1552;
                icmp_ln824_reg_1552_pp0_iter6_reg <= icmp_ln824_reg_1552_pp0_iter5_reg;
                icmp_ln824_reg_1552_pp0_iter7_reg <= icmp_ln824_reg_1552_pp0_iter6_reg;
                icmp_ln824_reg_1552_pp0_iter8_reg <= icmp_ln824_reg_1552_pp0_iter7_reg;
                icmp_ln824_reg_1552_pp0_iter9_reg <= icmp_ln824_reg_1552_pp0_iter8_reg;
                isNeg_reg_1539 <= Ex_V_3_fu_534_p2(10 downto 10);
                or_ln462_reg_1741 <= or_ln462_fu_1285_p2;
                p_Result_15_1_i_reg_1690 <= r_V_13_fu_981_p2(109 downto 94);
                p_Result_15_2_i_reg_1695 <= r_V_13_fu_981_p2(93 downto 78);
                p_Result_15_i_reg_1685 <= r_V_13_fu_981_p2(125 downto 110);
                p_Result_21_reg_1457_pp0_iter2_reg <= p_Result_21_reg_1457_pp0_iter1_reg;
                p_Result_21_reg_1457_pp0_iter3_reg <= p_Result_21_reg_1457_pp0_iter2_reg;
                p_Result_i_reg_1700 <= r_V_13_fu_981_p2(77 downto 63);
                result_V_reg_1679 <= r_V_13_fu_981_p2(125 downto 63);
                results_exp_V_reg_1748 <= results_exp_V_fu_1315_p3;
                results_sign_V_reg_1570 <= results_sign_V_fu_688_p3;
                results_sign_V_reg_1570_pp0_iter10_reg <= results_sign_V_reg_1570_pp0_iter9_reg;
                results_sign_V_reg_1570_pp0_iter11_reg <= results_sign_V_reg_1570_pp0_iter10_reg;
                results_sign_V_reg_1570_pp0_iter5_reg <= results_sign_V_reg_1570;
                results_sign_V_reg_1570_pp0_iter6_reg <= results_sign_V_reg_1570_pp0_iter5_reg;
                results_sign_V_reg_1570_pp0_iter7_reg <= results_sign_V_reg_1570_pp0_iter6_reg;
                results_sign_V_reg_1570_pp0_iter8_reg <= results_sign_V_reg_1570_pp0_iter7_reg;
                results_sign_V_reg_1570_pp0_iter9_reg <= results_sign_V_reg_1570_pp0_iter8_reg;
                ret_V_5_reg_1659 <= ret_V_5_fu_936_p2;
                ret_V_reg_1674 <= ret_V_fu_969_p2;
                ret_reg_1509 <= grp_fu_389_p2;
                rhs_1_reg_1624 <= r_V_8_fu_817_p2(107 downto 52);
                rhs_2_reg_1629 <= r_V_9_fu_840_p2(92 downto 45);
                rhs_4_reg_1654 <= r_V_11_fu_904_p2(59 downto 31);
                shl_ln1253_1_reg_1725 <= shl_ln1253_1_fu_1172_p2;
                shl_ln1253_reg_1715 <= shl_ln1253_fu_1151_p2;
                tmp_14_reg_1463_pp0_iter2_reg <= tmp_14_reg_1463_pp0_iter1_reg;
                tmp_14_reg_1463_pp0_iter3_reg <= tmp_14_reg_1463_pp0_iter2_reg;
                tmp_2_i_reg_1705 <= tmp_2_i_fu_1121_p3;
                tmp_3_i_reg_1710 <= tmp_3_i_fu_1139_p3;
                trunc_ln1069_1_reg_1644 <= r_V_6_fu_805_p2(97 downto 63);
                trunc_ln1_reg_1634 <= r_V_4_fu_800_p2(97 downto 56);
                trunc_ln2_reg_1664 <= r_V_10_fu_891_p2(74 downto 38);
                    zext_ln1070_reg_1598(48 downto 0) <= zext_ln1070_fu_778_p1(48 downto 0);
                    zext_ln488_reg_1585(7 downto 0) <= zext_ln488_fu_773_p1(7 downto 0);
                    zext_ln488_reg_1585_pp0_iter6_reg(7 downto 0) <= zext_ln488_reg_1585(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                Med_V_reg_1493 <= r_2_fu_362_p2(255 downto 86);
                closepath_reg_1476 <= closepath_fu_320_p2;
                closepath_reg_1476_pp0_iter1_reg <= closepath_reg_1476;
                p_Result_21_reg_1457 <= data_V_fu_294_p1(63 downto 63);
                p_Result_21_reg_1457_pp0_iter1_reg <= p_Result_21_reg_1457;
                tmp_14_reg_1463 <= data_V_fu_294_p1(62 downto 52);
                tmp_14_reg_1463_pp0_iter1_reg <= tmp_14_reg_1463;
                tmp_15_reg_1470 <= tmp_15_fu_316_p1;
                tmp_15_reg_1470_pp0_iter1_reg <= tmp_15_reg_1470;
                trunc_ln628_reg_1488 <= trunc_ln628_fu_355_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (closepath_reg_1476_pp0_iter2_reg = ap_const_lv1_0))) then
                k_V_reg_1521 <= grp_fu_389_p2(169 downto 167);
            end if;
        end if;
    end process;
    zext_ln488_reg_1585(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln488_reg_1585_pp0_iter6_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln1070_reg_1598(97 downto 49) <= "0000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    B_fu_746_p1 <= r_V_14_fu_729_p3(56 - 1 downto 0);
    Ex_V_3_fu_534_p2 <= std_logic_vector(unsigned(select_ln482_fu_424_p3) - unsigned(zext_ln646_fu_510_p1));
    Ex_V_4_fu_1037_p3 <= 
        ap_const_lv11_0 when (cos_basis_reg_1545_pp0_iter10_reg(0) = '1') else 
        Ex_V_3_reg_1533_pp0_iter10_reg;
    Ex_V_fu_419_p2 <= std_logic_vector(unsigned(tmp_14_reg_1463_pp0_iter3_reg) + unsigned(ap_const_lv11_403));
    Mx_V_2_fu_952_p3 <= 
        ap_const_lv63_7FFFFFFFFFFFFFFF when (cos_basis_reg_1545_pp0_iter8_reg(0) = '1') else 
        Mx_V_reg_1526_pp0_iter8_reg;
    Mx_bits_V_1_fu_438_p2 <= std_logic_vector(unsigned(ap_const_lv124_0) - unsigned(Mx_bits_V_reg_1514));
    Mx_bits_V_3_fu_456_p3 <= 
        Mx_bits_V_reg_1514 when (closepath_reg_1476_pp0_iter3_reg(0) = '1') else 
        select_ln520_fu_443_p3;
    Mx_zeros_fu_506_p1 <= tmp_fu_498_p3(7 - 1 downto 0);
    add_ln116_fu_326_p2 <= std_logic_vector(unsigned(tmp_14_fu_306_p4) + unsigned(ap_const_lv11_44D));
    add_ln451_1_fu_1184_p2 <= std_logic_vector(unsigned(tmp_2_i_fu_1121_p3) + unsigned(add_ln451_fu_1162_p2));
    add_ln451_2_fu_1196_p2 <= std_logic_vector(unsigned(tmp_3_i_fu_1139_p3) + unsigned(add_ln451_1_fu_1184_p2));
    add_ln451_fu_1162_p2 <= std_logic_vector(unsigned(tmp_1_i_fu_1103_p3) + unsigned(ap_const_lv32_10));
    add_ln461_fu_1256_p2 <= std_logic_vector(signed(sext_ln169_fu_1043_p1) + signed(ap_const_lv12_3FF));
    addr_fu_332_p3 <= 
        ap_const_lv11_4A when (closepath_fu_320_p2(0) = '1') else 
        add_ln116_fu_326_p2;
    and_ln300_1_fu_1415_p2 <= (icmp_ln824_reg_1552_pp0_iter11_reg and icmp_ln824_1_reg_1503_pp0_iter11_reg);
    and_ln300_fu_666_p2 <= (icmp_ln824_fu_661_p2 and icmp_ln824_1_reg_1503_pp0_iter3_reg);
    and_ln311_fu_682_p2 <= (xor_ln311_fu_676_p2 and results_sign_V_1_fu_653_p3);
    and_ln453_1_fu_1214_p2 <= (icmp_ln453_2_fu_1190_p2 and icmp_ln453_1_fu_1178_p2);
    and_ln453_2_fu_1220_p2 <= (icmp_ln453_fu_1156_p2 and and_ln453_1_fu_1214_p2);
    and_ln453_fu_1208_p2 <= (xor_ln453_fu_1202_p2 and icmp_ln453_fu_1156_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to11_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to11 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to11)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to11 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_Result_27_fu_1445_p4;
    closepath_fu_320_p2 <= "1" when (unsigned(tmp_14_fu_306_p4) < unsigned(ap_const_lv11_3FE)) else "0";
    data_V_fu_294_p1 <= t_in;
    fourth_order_double_sin_cos_K0_V_address0 <= zext_ln488_reg_1585_pp0_iter6_reg(8 - 1 downto 0);

    fourth_order_double_sin_cos_K0_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fourth_order_double_sin_cos_K0_V_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_sin_cos_K0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_sin_cos_K1_V_address0 <= zext_ln488_fu_773_p1(8 - 1 downto 0);

    fourth_order_double_sin_cos_K1_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fourth_order_double_sin_cos_K1_V_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_sin_cos_K1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_sin_cos_K2_V_address0 <= zext_ln488_reg_1585(8 - 1 downto 0);

    fourth_order_double_sin_cos_K2_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fourth_order_double_sin_cos_K2_V_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_sin_cos_K2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_sin_cos_K3_V_address0 <= zext_ln488_reg_1585_pp0_iter6_reg(8 - 1 downto 0);

    fourth_order_double_sin_cos_K3_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fourth_order_double_sin_cos_K3_V_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_sin_cos_K3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_sin_cos_K4_V_address0 <= zext_ln488_reg_1585_pp0_iter6_reg(8 - 1 downto 0);

    fourth_order_double_sin_cos_K4_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fourth_order_double_sin_cos_K4_V_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_sin_cos_K4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_389_p1 <= grp_fu_389_p10(53 - 1 downto 0);
    grp_fu_389_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_22_fu_378_p3),170));
    icmp_ln1452_fu_1280_p2 <= "1" when (result_V_reg_1679 = ap_const_lv63_0) else "0";
    icmp_ln453_1_fu_1178_p2 <= "1" when (tmp_1_i_fu_1103_p3 = ap_const_lv32_10) else "0";
    icmp_ln453_2_fu_1190_p2 <= "1" when (tmp_2_i_fu_1121_p3 = ap_const_lv32_10) else "0";
    icmp_ln453_fu_1156_p2 <= "1" when (tmp_i_fu_1085_p3 = ap_const_lv32_10) else "0";
    icmp_ln824_1_fu_394_p2 <= "1" when (tmp_15_reg_1470_pp0_iter1_reg = ap_const_lv52_0) else "0";
    icmp_ln824_2_fu_671_p2 <= "1" when (tmp_14_reg_1463_pp0_iter3_reg = ap_const_lv11_7FF) else "0";
    icmp_ln824_fu_661_p2 <= "1" when (tmp_14_reg_1463_pp0_iter3_reg = ap_const_lv11_0) else "0";
    newexp_fu_1266_p2 <= std_logic_vector(signed(sext_ln461_fu_1262_p1) - signed(select_ln453_2_fu_1248_p3));
    or_ln300_fu_1433_p2 <= (icmp_ln824_2_reg_1563_pp0_iter11_reg or and_ln300_reg_1557_pp0_iter11_reg);
    or_ln311_fu_1302_p2 <= (or_ln462_fu_1285_p2 or icmp_ln824_2_reg_1563_pp0_iter10_reg);
    or_ln453_fu_1234_p2 <= (and_ln453_fu_1208_p2 or and_ln453_2_fu_1220_p2);
    or_ln462_1_fu_1339_p2 <= (or_ln462_reg_1741 or and_ln453_2_reg_1736);
    or_ln462_2_fu_1343_p2 <= (or_ln462_reg_1741 or icmp_ln453_reg_1720);
    or_ln462_fu_1285_p2 <= (tmp_12_fu_1272_p3 or icmp_ln1452_fu_1280_p2);
    
    p_Result_20_1_i_fu_1093_p4_proc : process(p_Result_3_1_i_fu_1054_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_20_1_i_fu_1093_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_3_1_i_fu_1054_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_20_1_i_fu_1093_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_20_1_i_fu_1093_p4_i) := p_Result_3_1_i_fu_1054_p3(32-1-p_Result_20_1_i_fu_1093_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_20_1_i_fu_1093_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_20_2_i_fu_1111_p4_proc : process(p_Result_3_2_i_fu_1061_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_20_2_i_fu_1111_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_3_2_i_fu_1061_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_20_2_i_fu_1111_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_20_2_i_fu_1111_p4_i) := p_Result_3_2_i_fu_1061_p3(32-1-p_Result_20_2_i_fu_1111_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_20_2_i_fu_1111_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_20_3_i_fu_1129_p4_proc : process(p_Result_8_fu_1068_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_20_3_i_fu_1129_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_8_fu_1068_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_20_3_i_fu_1129_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_20_3_i_fu_1129_p4_i) := p_Result_8_fu_1068_p3(32-1-p_Result_20_3_i_fu_1129_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_20_3_i_fu_1129_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_20_i_fu_1075_p4_proc : process(p_Result_3_i_fu_1047_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_20_i_fu_1075_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_3_i_fu_1047_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_20_i_fu_1075_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_20_i_fu_1075_p4_i) := p_Result_3_i_fu_1047_p3(32-1-p_Result_20_i_fu_1075_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_20_i_fu_1075_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_22_fu_378_p3 <= (ap_const_lv1_1 & tmp_15_reg_1470_pp0_iter1_reg);
    p_Result_23_fu_472_p3 <= (p_Result_2_fu_462_p4 & ap_const_lv1_1);
    p_Result_24_fu_490_p3 <= (ap_const_lv2_3 & p_Result_4_fu_480_p4);
    p_Result_25_fu_765_p3 <= (sin_basis_fu_760_p2 & p_Result_6_fu_736_p4);
    p_Result_26_fu_570_p3 <= (p_Result_21_reg_1457_pp0_iter3_reg & select_ln832_fu_450_p3);
    p_Result_27_fu_1445_p4 <= ((results_sign_V_reg_1570_pp0_iter11_reg & results_exp_V_reg_1748) & results_sig_V_fu_1437_p3);
    p_Result_2_fu_462_p4 <= Mx_bits_V_3_fu_456_p3(123 downto 63);
    p_Result_3_1_i_fu_1054_p3 <= (p_Result_15_1_i_reg_1690 & ap_const_lv16_8000);
    p_Result_3_2_i_fu_1061_p3 <= (p_Result_15_2_i_reg_1695 & ap_const_lv16_8000);
    p_Result_3_i_fu_1047_p3 <= (p_Result_15_i_reg_1685 & ap_const_lv16_8000);
    
    p_Result_4_fu_480_p4_proc : process(p_Result_23_fu_472_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable p_Result_4_fu_480_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3D(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := p_Result_23_fu_472_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_3D(6-1 downto 0)));
            for p_Result_4_fu_480_p4_i in 0 to 62-1 loop
                v0_cpy(p_Result_4_fu_480_p4_i) := p_Result_23_fu_472_p3(62-1-p_Result_4_fu_480_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(62-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_4_fu_480_p4 <= resvalue(62-1 downto 0);
    end process;

    p_Result_6_fu_736_p4 <= r_V_14_fu_729_p3(62 downto 56);
    p_Result_8_fu_1068_p3 <= (p_Result_i_reg_1700 & ap_const_lv17_10000);
    p_Result_s_fu_340_p4 <= addr_fu_332_p3(10 downto 7);
    r_2_fu_362_p2 <= std_logic_vector(shift_left(unsigned(ref_4oPi_table_256_V_q0),to_integer(unsigned('0' & zext_ln735_fu_359_p1(31-1 downto 0)))));
    r_V_10_fu_891_p0 <= r_V_10_fu_891_p00(42 - 1 downto 0);
    r_V_10_fu_891_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1_reg_1634),75));
    r_V_10_fu_891_p1 <= r_V_10_fu_891_p10(33 - 1 downto 0);
    r_V_10_fu_891_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fourth_order_double_sin_cos_K3_V_q0),75));
    r_V_11_fu_904_p0 <= r_V_11_fu_904_p00(35 - 1 downto 0);
    r_V_11_fu_904_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1069_1_reg_1644),60));
    r_V_11_fu_904_p1 <= r_V_11_fu_904_p10(25 - 1 downto 0);
    r_V_11_fu_904_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fourth_order_double_sin_cos_K4_V_q0),60));
    r_V_13_fu_981_p1 <= r_V_13_fu_981_p10(63 - 1 downto 0);
    r_V_13_fu_981_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_V_2_reg_1669),126));
    r_V_14_fu_729_p3 <= 
        r_V_fu_719_p2 when (isNeg_reg_1539(0) = '1') else 
        r_V_1_fu_724_p2;
    r_V_1_fu_724_p2 <= std_logic_vector(shift_left(unsigned(Mx_V_reg_1526),to_integer(unsigned('0' & sh_prom_i_i_i_i_cast_cast_cast_cast_fu_715_p1(31-1 downto 0)))));
    r_V_3_fu_781_p0 <= zext_ln1070_fu_778_p1(49 - 1 downto 0);
    r_V_3_fu_781_p1 <= zext_ln1070_fu_778_p1(49 - 1 downto 0);
    r_V_4_fu_800_p0 <= zext_ln662_1_fu_797_p1(49 - 1 downto 0);
    r_V_4_fu_800_p1 <= zext_ln1070_reg_1598(49 - 1 downto 0);
    r_V_6_fu_805_p0 <= zext_ln662_1_fu_797_p1(49 - 1 downto 0);
    r_V_6_fu_805_p1 <= zext_ln662_1_fu_797_p1(49 - 1 downto 0);
    r_V_8_fu_817_p0 <= r_V_8_fu_817_p00(56 - 1 downto 0);
    r_V_8_fu_817_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_reg_1575_pp0_iter6_reg),108));
    r_V_9_fu_840_p0 <= r_V_9_fu_840_p00(49 - 1 downto 0);
    r_V_9_fu_840_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_squared_reg_1603),93));
    r_V_fu_719_p2 <= std_logic_vector(shift_right(unsigned(Mx_V_reg_1526),to_integer(unsigned('0' & sh_prom_i_i_i_i_cast_cast_cast_cast_fu_715_p1(31-1 downto 0)))));
    r_fu_518_p2 <= std_logic_vector(shift_left(unsigned(Mx_bits_V_3_fu_456_p3),to_integer(unsigned('0' & zext_ln1253_fu_514_p1(31-1 downto 0)))));
    ref_4oPi_table_256_V_address0 <= zext_ln662_fu_350_p1(4 - 1 downto 0);

    ref_4oPi_table_256_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ref_4oPi_table_256_V_ce0 <= ap_const_logic_1;
        else 
            ref_4oPi_table_256_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    results_exp_V_fu_1315_p3 <= 
        ap_const_lv11_0 when (and_ln300_reg_1557_pp0_iter10_reg(0) = '1') else 
        select_ln311_fu_1307_p3;
    results_sig_V_fu_1437_p3 <= 
        select_ln300_2_fu_1425_p3 when (or_ln300_fu_1433_p2(0) = '1') else 
        significand_fu_1407_p3;
    results_sign_V_1_fu_653_p3 <= 
        tmp_s_fu_577_p18 when (cos_basis_fu_548_p10(0) = '1') else 
        tmp_1_fu_615_p18;
    results_sign_V_fu_688_p3 <= 
        p_Result_21_reg_1457_pp0_iter3_reg when (and_ln300_fu_666_p2(0) = '1') else 
        and_ln311_fu_682_p2;
    ret_V_4_fu_927_p2 <= std_logic_vector(signed(sext_ln657_fu_920_p1) + signed(sext_ln657_1_fu_924_p1));
    ret_V_5_fu_936_p2 <= std_logic_vector(unsigned(ret_V_4_fu_927_p2) + unsigned(sext_ln1146_fu_933_p1));
    ret_V_6_fu_961_p2 <= std_logic_vector(unsigned(ret_V_5_reg_1659) + unsigned(zext_ln1146_fu_958_p1));
    ret_V_fu_969_p2 <= std_logic_vector(unsigned(ret_V_6_fu_961_p2) + unsigned(zext_ln1146_1_fu_966_p1));
    select_ln300_2_fu_1425_p3 <= 
        ap_const_lv52_FFFFFFFFFFFFF when (xor_ln300_fu_1419_p2(0) = '1') else 
        ap_const_lv52_0;
    select_ln311_1_fu_1295_p3 <= 
        ap_const_lv11_7FF when (icmp_ln824_2_reg_1563_pp0_iter10_reg(0) = '1') else 
        ap_const_lv11_0;
    select_ln311_fu_1307_p3 <= 
        select_ln311_1_fu_1295_p3 when (or_ln311_fu_1302_p2(0) = '1') else 
        trunc_ln255_fu_1291_p1;
    select_ln453_1_fu_1240_p3 <= 
        add_ln451_1_fu_1184_p2 when (icmp_ln453_fu_1156_p2(0) = '1') else 
        tmp_i_fu_1085_p3;
    select_ln453_2_fu_1248_p3 <= 
        select_ln453_fu_1226_p3 when (or_ln453_fu_1234_p2(0) = '1') else 
        select_ln453_1_fu_1240_p3;
    select_ln453_fu_1226_p3 <= 
        add_ln451_2_fu_1196_p2 when (and_ln453_2_fu_1220_p2(0) = '1') else 
        add_ln451_fu_1162_p2;
    select_ln462_1_fu_1383_p3 <= 
        tmp_5_fu_1364_p4 when (and_ln453_reg_1731(0) = '1') else 
        tmp_6_fu_1373_p4;
    select_ln462_2_fu_1390_p3 <= 
        select_ln462_fu_1357_p3 when (or_ln462_1_fu_1339_p2(0) = '1') else 
        select_ln462_1_fu_1383_p3;
    select_ln462_fu_1357_p3 <= 
        ap_const_lv52_0 when (or_ln462_reg_1741(0) = '1') else 
        tmp_4_fu_1347_p4;
    select_ln482_fu_424_p3 <= 
        Ex_V_fu_419_p2 when (closepath_reg_1476_pp0_iter3_reg(0) = '1') else 
        ap_const_lv11_0;
    select_ln520_fu_443_p3 <= 
        Mx_bits_V_1_fu_438_p2 when (tmp_10_fu_431_p3(0) = '1') else 
        Mx_bits_V_reg_1514;
    select_ln832_fu_450_p3 <= 
        ap_const_lv3_0 when (closepath_reg_1476_pp0_iter3_reg(0) = '1') else 
        k_V_reg_1521;
        sext_ln1146_fu_933_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_2_reg_1629),64));

        sext_ln1334_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_3_reg_1533),12));

        sext_ln169_fu_1043_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_4_fu_1037_p3),12));

        sext_ln461_fu_1262_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln461_fu_1256_p2),32));

        sext_ln657_1_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_1_reg_1624),64));

        sext_ln657_fu_920_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t1_fu_876_p3),64));

    sh_prom_i_i_0_i_fu_1147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_fu_1085_p3),63));
    sh_prom_i_i_1_i_fu_1168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_i_fu_1103_p3),63));
    sh_prom_i_i_2_i_fu_1322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_i_reg_1705),63));
    sh_prom_i_i_3_i_fu_1330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_i_reg_1710),63));
    sh_prom_i_i_i_i_cast_cast_cast_cast_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_cast_cast_cast_fu_711_p1),63));
        sh_prom_i_i_i_i_cast_cast_cast_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_704_p3),32));

    shl_ln1253_1_fu_1172_p2 <= std_logic_vector(shift_left(unsigned(shl_ln1253_fu_1151_p2),to_integer(unsigned('0' & sh_prom_i_i_1_i_fu_1168_p1(31-1 downto 0)))));
    shl_ln1253_2_fu_1325_p2 <= std_logic_vector(shift_left(unsigned(shl_ln1253_1_reg_1725),to_integer(unsigned('0' & sh_prom_i_i_2_i_fu_1322_p1(31-1 downto 0)))));
    shl_ln1253_3_fu_1333_p2 <= std_logic_vector(shift_left(unsigned(shl_ln1253_2_fu_1325_p2),to_integer(unsigned('0' & sh_prom_i_i_3_i_fu_1330_p1(31-1 downto 0)))));
    shl_ln1253_fu_1151_p2 <= std_logic_vector(shift_left(unsigned(result_V_reg_1679),to_integer(unsigned('0' & sh_prom_i_i_0_i_fu_1147_p1(31-1 downto 0)))));
    significand_fu_1407_p3 <= 
        select_ln462_2_fu_1390_p3 when (or_ln462_2_fu_1343_p2(0) = '1') else 
        tmp_7_fu_1398_p4;
    sin_basis_fu_760_p2 <= (cos_basis_reg_1545 xor ap_const_lv1_1);
    sub_ln1311_fu_698_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sext_ln1334_fu_695_p1));
    t1_fu_876_p3 <= (fourth_order_double_sin_cos_K0_V_q0 & ap_const_lv4_0);
    tmp_10_fu_431_p3 <= ret_reg_1509(167 downto 167);
    tmp_12_fu_1272_p3 <= newexp_fu_1266_p2(31 downto 31);
    tmp_14_fu_306_p4 <= data_V_fu_294_p1(62 downto 52);
    tmp_15_fu_316_p1 <= data_V_fu_294_p1(52 - 1 downto 0);
    
    tmp_1_i_fu_1103_p3_proc : process(p_Result_20_1_i_fu_1093_p4)
    begin
        tmp_1_i_fu_1103_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_20_1_i_fu_1093_p4(i) = '1' then
                tmp_1_i_fu_1103_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_2_i_fu_1121_p3_proc : process(p_Result_20_2_i_fu_1111_p4)
    begin
        tmp_2_i_fu_1121_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_20_2_i_fu_1111_p4(i) = '1' then
                tmp_2_i_fu_1121_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_3_i_fu_1139_p3_proc : process(p_Result_20_3_i_fu_1129_p4)
    begin
        tmp_3_i_fu_1139_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_20_3_i_fu_1129_p4(i) = '1' then
                tmp_3_i_fu_1139_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_4_fu_1347_p4 <= shl_ln1253_3_fu_1333_p2(61 downto 10);
    tmp_5_fu_1364_p4 <= shl_ln1253_1_reg_1725(61 downto 10);
    tmp_6_fu_1373_p4 <= shl_ln1253_2_fu_1325_p2(61 downto 10);
    tmp_7_fu_1398_p4 <= shl_ln1253_reg_1715(61 downto 10);
    
    tmp_fu_498_p3_proc : process(p_Result_24_fu_490_p3)
    begin
        tmp_fu_498_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_24_fu_490_p3(i) = '1' then
                tmp_fu_498_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_i_fu_1085_p3_proc : process(p_Result_20_i_fu_1075_p4)
    begin
        tmp_i_fu_1085_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_20_i_fu_1075_p4(i) = '1' then
                tmp_i_fu_1085_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    trunc_ln255_fu_1291_p1 <= newexp_fu_1266_p2(11 - 1 downto 0);
    trunc_ln628_fu_355_p1 <= addr_fu_332_p3(7 - 1 downto 0);
    ush_fu_704_p3 <= 
        sub_ln1311_fu_698_p2 when (isNeg_reg_1539(0) = '1') else 
        sext_ln1334_fu_695_p1;
    xor_ln300_fu_1419_p2 <= (ap_const_lv1_1 xor and_ln300_1_fu_1415_p2);
    xor_ln311_fu_676_p2 <= (icmp_ln824_2_fu_671_p2 xor ap_const_lv1_1);
    xor_ln453_fu_1202_p2 <= (icmp_ln453_1_fu_1178_p2 xor ap_const_lv1_1);
    zext_ln1070_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_trunc_reg_1580),98));
    zext_ln1146_1_fu_966_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_4_reg_1654),64));
    zext_ln1146_fu_958_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln2_reg_1664),64));
    zext_ln1253_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_fu_506_p1),124));
    zext_ln488_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_25_fu_765_p3),64));
    zext_ln646_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_fu_506_p1),11));
    zext_ln662_1_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_squared_reg_1603),98));
    zext_ln662_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_340_p4),64));
    zext_ln735_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln628_reg_1488),256));
end behav;
