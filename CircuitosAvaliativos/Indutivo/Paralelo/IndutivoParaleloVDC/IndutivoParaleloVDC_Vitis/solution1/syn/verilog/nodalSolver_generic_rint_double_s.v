// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nodalSolver_generic_rint_double_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        ap_return
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] x;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[63:0] ap_return;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] mask_table_address0;
reg    mask_table_ce0;
wire   [51:0] mask_table_q0;
wire   [5:0] one_half_minus_one_table_address0;
reg    one_half_minus_one_table_ce0;
wire   [51:0] one_half_minus_one_table_q0;
wire   [63:0] data_V_fu_171_p1;
reg   [63:0] data_V_reg_361;
reg   [0:0] p_Result_40_reg_367;
wire   [0:0] icmp_ln840_fu_197_p2;
reg   [0:0] icmp_ln840_reg_372;
wire   [0:0] and_ln34_fu_215_p2;
reg   [0:0] and_ln34_reg_376;
wire   [0:0] icmp_ln836_fu_221_p2;
reg   [0:0] icmp_ln836_reg_380;
wire   [63:0] zext_ln488_fu_237_p1;
reg   [63:0] zext_ln488_reg_384;
reg   [51:0] mask_reg_399;
wire    ap_CS_fsm_state2;
wire   [52:0] zext_ln42_fu_243_p1;
reg   [52:0] zext_ln42_reg_404;
wire   [5:0] add_ln50_fu_247_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state5;
wire   [63:0] bitcast_ln521_fu_352_p1;
wire    ap_CS_fsm_state7;
reg   [5:0] index_table_address0;
reg    index_table_ce0;
reg    index_table_we0;
reg   [6:0] index_table_d0;
reg   [5:0] index_table_address1;
reg    index_table_ce1;
reg    index_table_we1;
wire   [6:0] index_table_q1;
reg   [5:0] i_reg_149;
wire   [0:0] icmp_ln50_fu_253_p2;
reg   [63:0] ap_phi_mux_retval_0_phi_fu_163_p6;
reg   [63:0] retval_0_reg_160;
wire   [63:0] bitcast_ln521_1_fu_340_p1;
wire    ap_CS_fsm_state6;
wire   [63:0] trunc_ln51_cast1_fu_259_p1;
wire    ap_CS_fsm_state4;
wire   [6:0] sub_ln51_fu_268_p2;
wire   [10:0] tmp_38_fu_183_p4;
wire   [51:0] tmp_39_fu_193_p1;
wire   [0:0] icmp_ln824_fu_203_p2;
wire   [0:0] icmp_ln824_3_fu_209_p2;
wire   [5:0] index_fu_227_p4;
wire   [6:0] zext_ln51_fu_264_p1;
wire  signed [31:0] sext_ln773_fu_275_p1;
wire   [0:0] p_Result_s_fu_279_p3;
wire   [52:0] add_ln61_fu_286_p2;
wire   [52:0] one_half_1_fu_291_p3;
wire   [63:0] zext_ln42_1_fu_298_p1;
wire   [63:0] data_V_3_fu_302_p2;
wire   [51:0] tmp_40_fu_307_p1;
wire   [51:0] xor_ln1302_fu_311_p2;
wire   [11:0] tmp_fu_322_p4;
wire   [51:0] xs_sig_V_fu_316_p2;
wire   [63:0] p_Result_42_fu_332_p3;
wire   [63:0] p_Result_41_fu_345_p3;
reg   [63:0] ap_return_preg;
reg   [6:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_return_preg = 64'd0;
end

nodalSolver_generic_rint_double_s_mask_table #(
    .DataWidth( 52 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
mask_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mask_table_address0),
    .ce0(mask_table_ce0),
    .q0(mask_table_q0)
);

nodalSolver_generic_rint_double_s_one_half_minus_one_table #(
    .DataWidth( 52 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
one_half_minus_one_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(one_half_minus_one_table_address0),
    .ce0(one_half_minus_one_table_ce0),
    .q0(one_half_minus_one_table_q0)
);

nodalSolver_generic_rint_double_s_index_table #(
    .DataWidth( 7 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
index_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(index_table_address0),
    .ce0(index_table_ce0),
    .we0(index_table_we0),
    .d0(index_table_d0),
    .address1(index_table_address1),
    .ce1(index_table_ce1),
    .we1(index_table_we1),
    .d1(7'd50),
    .q1(index_table_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_preg <= ap_phi_mux_retval_0_phi_fu_163_p6;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_149 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln50_fu_253_p2 == 1'd0))) begin
        i_reg_149 <= add_ln50_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln836_fu_221_p2 == 1'd1) & (1'd0 == and_ln34_fu_215_p2) & (icmp_ln840_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        retval_0_reg_160 <= x;
    end else if (((icmp_ln836_reg_380 == 1'd0) & (1'd0 == and_ln34_reg_376) & (icmp_ln840_reg_372 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        retval_0_reg_160 <= bitcast_ln521_1_fu_340_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        retval_0_reg_160 <= bitcast_ln521_fu_352_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln840_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        and_ln34_reg_376 <= and_ln34_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        data_V_reg_361 <= data_V_fu_171_p1;
        icmp_ln840_reg_372 <= icmp_ln840_fu_197_p2;
        p_Result_40_reg_367 <= data_V_fu_171_p1[32'd63];
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln34_fu_215_p2) & (icmp_ln840_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln836_reg_380 <= icmp_ln836_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mask_reg_399 <= mask_table_q0;
        zext_ln42_reg_404[51 : 0] <= zext_ln42_fu_243_p1[51 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln836_fu_221_p2 == 1'd0) & (1'd0 == and_ln34_fu_215_p2) & (icmp_ln840_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        zext_ln488_reg_384[5 : 0] <= zext_ln488_fu_237_p1[5 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln836_reg_380 == 1'd0) & (1'd0 == and_ln34_reg_376) & (icmp_ln840_reg_372 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_phi_mux_retval_0_phi_fu_163_p6 = bitcast_ln521_1_fu_340_p1;
    end else begin
        ap_phi_mux_retval_0_phi_fu_163_p6 = retval_0_reg_160;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return = ap_phi_mux_retval_0_phi_fu_163_p6;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        index_table_address0 = 64'd63;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        index_table_address0 = trunc_ln51_cast1_fu_259_p1;
    end else begin
        index_table_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        index_table_address1 = zext_ln488_reg_384;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        index_table_address1 = 64'd62;
    end else begin
        index_table_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        index_table_ce0 = 1'b1;
    end else begin
        index_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        index_table_ce1 = 1'b1;
    end else begin
        index_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        index_table_d0 = 7'd52;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        index_table_d0 = sub_ln51_fu_268_p2;
    end else begin
        index_table_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln50_fu_253_p2 == 1'd0)))) begin
        index_table_we0 = 1'b1;
    end else begin
        index_table_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        index_table_we1 = 1'b1;
    end else begin
        index_table_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        mask_table_ce0 = 1'b1;
    end else begin
        mask_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        one_half_minus_one_table_ce0 = 1'b1;
    end else begin
        one_half_minus_one_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln836_fu_221_p2 == 1'd1) & (1'd0 == and_ln34_fu_215_p2) & (icmp_ln840_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((icmp_ln836_fu_221_p2 == 1'd0) & (1'd0 == and_ln34_fu_215_p2) & (icmp_ln840_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & ((icmp_ln840_fu_197_p2 == 1'd1) | (1'd1 == and_ln34_fu_215_p2)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln50_fu_253_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln50_fu_247_p2 = (i_reg_149 + 6'd1);

assign add_ln61_fu_286_p2 = (zext_ln42_reg_404 + 53'd1);

assign and_ln34_fu_215_p2 = (icmp_ln824_fu_203_p2 & icmp_ln824_3_fu_209_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign bitcast_ln521_1_fu_340_p1 = p_Result_42_fu_332_p3;

assign bitcast_ln521_fu_352_p1 = p_Result_41_fu_345_p3;

assign data_V_3_fu_302_p2 = (zext_ln42_1_fu_298_p1 + data_V_reg_361);

assign data_V_fu_171_p1 = x;

assign icmp_ln50_fu_253_p2 = ((i_reg_149 == 6'd62) ? 1'b1 : 1'b0);

assign icmp_ln824_3_fu_209_p2 = ((tmp_39_fu_193_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln824_fu_203_p2 = ((tmp_38_fu_183_p4 == 11'd1022) ? 1'b1 : 1'b0);

assign icmp_ln836_fu_221_p2 = ((tmp_38_fu_183_p4 > 11'd1074) ? 1'b1 : 1'b0);

assign icmp_ln840_fu_197_p2 = ((tmp_38_fu_183_p4 < 11'd1022) ? 1'b1 : 1'b0);

assign index_fu_227_p4 = {{data_V_fu_171_p1[57:52]}};

assign mask_table_address0 = zext_ln488_fu_237_p1;

assign one_half_1_fu_291_p3 = ((p_Result_s_fu_279_p3[0:0] == 1'b1) ? add_ln61_fu_286_p2 : zext_ln42_reg_404);

assign one_half_minus_one_table_address0 = zext_ln488_fu_237_p1;

assign p_Result_41_fu_345_p3 = {{p_Result_40_reg_367}, {63'd0}};

assign p_Result_42_fu_332_p3 = {{tmp_fu_322_p4}, {xs_sig_V_fu_316_p2}};

assign p_Result_s_fu_279_p3 = data_V_reg_361[sext_ln773_fu_275_p1];

assign sext_ln773_fu_275_p1 = $signed(index_table_q1);

assign sub_ln51_fu_268_p2 = (7'd51 - zext_ln51_fu_264_p1);

assign tmp_38_fu_183_p4 = {{data_V_fu_171_p1[62:52]}};

assign tmp_39_fu_193_p1 = data_V_fu_171_p1[51:0];

assign tmp_40_fu_307_p1 = data_V_3_fu_302_p2[51:0];

assign tmp_fu_322_p4 = {{data_V_3_fu_302_p2[63:52]}};

assign trunc_ln51_cast1_fu_259_p1 = i_reg_149;

assign xor_ln1302_fu_311_p2 = (mask_reg_399 ^ 52'd4503599627370495);

assign xs_sig_V_fu_316_p2 = (xor_ln1302_fu_311_p2 & tmp_40_fu_307_p1);

assign zext_ln42_1_fu_298_p1 = one_half_1_fu_291_p3;

assign zext_ln42_fu_243_p1 = one_half_minus_one_table_q0;

assign zext_ln488_fu_237_p1 = index_fu_227_p4;

assign zext_ln51_fu_264_p1 = i_reg_149;

always @ (posedge ap_clk) begin
    zext_ln488_reg_384[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln42_reg_404[52] <= 1'b0;
end

endmodule //nodalSolver_generic_rint_double_s
