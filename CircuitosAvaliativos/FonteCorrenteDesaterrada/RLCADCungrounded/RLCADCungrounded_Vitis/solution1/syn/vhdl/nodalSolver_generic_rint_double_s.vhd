-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nodalSolver_generic_rint_double_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of nodalSolver_generic_rint_double_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_3E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";
    constant ap_const_lv7_32 : STD_LOGIC_VECTOR (6 downto 0) := "0110010";
    constant ap_const_lv7_34 : STD_LOGIC_VECTOR (6 downto 0) := "0110100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_432 : STD_LOGIC_VECTOR (10 downto 0) := "10000110010";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv7_33 : STD_LOGIC_VECTOR (6 downto 0) := "0110011";
    constant ap_const_lv53_1 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000001";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mask_table_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mask_table_ce0 : STD_LOGIC;
    signal mask_table_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal one_half_minus_one_table_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal one_half_minus_one_table_ce0 : STD_LOGIC;
    signal one_half_minus_one_table_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal data_V_fu_171_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_reg_361 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_40_reg_367 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln840_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln840_reg_372 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_reg_376 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln836_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln836_reg_380 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln488_fu_237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln488_reg_384 : STD_LOGIC_VECTOR (63 downto 0);
    signal mask_reg_399 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln42_fu_243_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln42_reg_404 : STD_LOGIC_VECTOR (52 downto 0);
    signal add_ln50_fu_247_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal bitcast_ln521_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal index_table_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal index_table_ce0 : STD_LOGIC;
    signal index_table_we0 : STD_LOGIC;
    signal index_table_d0 : STD_LOGIC_VECTOR (6 downto 0);
    signal index_table_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal index_table_ce1 : STD_LOGIC;
    signal index_table_we1 : STD_LOGIC;
    signal index_table_q1 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_149 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln50_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_retval_0_phi_fu_163_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal retval_0_reg_160 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln521_1_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal trunc_ln51_cast1_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub_ln51_fu_268_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_38_fu_183_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_39_fu_193_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln824_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_3_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_fu_227_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln51_fu_264_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln773_fu_275_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_279_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln61_fu_286_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal one_half_1_fu_291_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln42_1_fu_298_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_3_fu_302_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_fu_307_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal xor_ln1302_fu_311_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_fu_322_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal xs_sig_V_fu_316_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_42_fu_332_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_41_fu_345_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component nodalSolver_generic_rint_double_s_mask_table IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component nodalSolver_generic_rint_double_s_one_half_minus_one_table IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component nodalSolver_generic_rint_double_s_index_table IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (6 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (6 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;



begin
    mask_table_U : component nodalSolver_generic_rint_double_s_mask_table
    generic map (
        DataWidth => 52,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mask_table_address0,
        ce0 => mask_table_ce0,
        q0 => mask_table_q0);

    one_half_minus_one_table_U : component nodalSolver_generic_rint_double_s_one_half_minus_one_table
    generic map (
        DataWidth => 52,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => one_half_minus_one_table_address0,
        ce0 => one_half_minus_one_table_ce0,
        q0 => one_half_minus_one_table_q0);

    index_table_U : component nodalSolver_generic_rint_double_s_index_table
    generic map (
        DataWidth => 7,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => index_table_address0,
        ce0 => index_table_ce0,
        we0 => index_table_we0,
        d0 => index_table_d0,
        address1 => index_table_address1,
        ce1 => index_table_ce1,
        we1 => index_table_we1,
        d1 => ap_const_lv7_32,
        q1 => index_table_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_return_preg <= ap_phi_mux_retval_0_phi_fu_163_p6;
                end if; 
            end if;
        end if;
    end process;


    i_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_reg_149 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln50_fu_253_p2 = ap_const_lv1_0))) then 
                i_reg_149 <= add_ln50_fu_247_p2;
            end if; 
        end if;
    end process;

    retval_0_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln836_fu_221_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln34_fu_215_p2) and (icmp_ln840_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                retval_0_reg_160 <= x;
            elsif (((icmp_ln836_reg_380 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln34_reg_376) and (icmp_ln840_reg_372 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                retval_0_reg_160 <= bitcast_ln521_1_fu_340_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                retval_0_reg_160 <= bitcast_ln521_fu_352_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln840_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                and_ln34_reg_376 <= and_ln34_fu_215_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                data_V_reg_361 <= data_V_fu_171_p1;
                icmp_ln840_reg_372 <= icmp_ln840_fu_197_p2;
                p_Result_40_reg_367 <= data_V_fu_171_p1(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln34_fu_215_p2) and (icmp_ln840_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln836_reg_380 <= icmp_ln836_fu_221_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                mask_reg_399 <= mask_table_q0;
                    zext_ln42_reg_404(51 downto 0) <= zext_ln42_fu_243_p1(51 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln836_fu_221_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln34_fu_215_p2) and (icmp_ln840_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    zext_ln488_reg_384(5 downto 0) <= zext_ln488_fu_237_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln488_reg_384(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln42_reg_404(52) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln840_fu_197_p2, and_ln34_fu_215_p2, icmp_ln836_fu_221_p2, ap_CS_fsm_state3, icmp_ln50_fu_253_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln836_fu_221_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln34_fu_215_p2) and (icmp_ln840_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((icmp_ln836_fu_221_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln34_fu_215_p2) and (icmp_ln840_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and ((icmp_ln840_fu_197_p2 = ap_const_lv1_1) or (ap_const_lv1_1 = and_ln34_fu_215_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln50_fu_253_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln50_fu_247_p2 <= std_logic_vector(unsigned(i_reg_149) + unsigned(ap_const_lv6_1));
    add_ln61_fu_286_p2 <= std_logic_vector(unsigned(zext_ln42_reg_404) + unsigned(ap_const_lv53_1));
    and_ln34_fu_215_p2 <= (icmp_ln824_fu_203_p2 and icmp_ln824_3_fu_209_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_retval_0_phi_fu_163_p6_assign_proc : process(icmp_ln840_reg_372, and_ln34_reg_376, icmp_ln836_reg_380, retval_0_reg_160, bitcast_ln521_1_fu_340_p1, ap_CS_fsm_state6)
    begin
        if (((icmp_ln836_reg_380 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln34_reg_376) and (icmp_ln840_reg_372 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_phi_mux_retval_0_phi_fu_163_p6 <= bitcast_ln521_1_fu_340_p1;
        else 
            ap_phi_mux_retval_0_phi_fu_163_p6 <= retval_0_reg_160;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_retval_0_phi_fu_163_p6, ap_CS_fsm_state6, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_return <= ap_phi_mux_retval_0_phi_fu_163_p6;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitcast_ln521_1_fu_340_p1 <= p_Result_42_fu_332_p3;
    bitcast_ln521_fu_352_p1 <= p_Result_41_fu_345_p3;
    data_V_3_fu_302_p2 <= std_logic_vector(unsigned(zext_ln42_1_fu_298_p1) + unsigned(data_V_reg_361));
    data_V_fu_171_p1 <= x;
    icmp_ln50_fu_253_p2 <= "1" when (i_reg_149 = ap_const_lv6_3E) else "0";
    icmp_ln824_3_fu_209_p2 <= "1" when (tmp_39_fu_193_p1 = ap_const_lv52_0) else "0";
    icmp_ln824_fu_203_p2 <= "1" when (tmp_38_fu_183_p4 = ap_const_lv11_3FE) else "0";
    icmp_ln836_fu_221_p2 <= "1" when (unsigned(tmp_38_fu_183_p4) > unsigned(ap_const_lv11_432)) else "0";
    icmp_ln840_fu_197_p2 <= "1" when (unsigned(tmp_38_fu_183_p4) < unsigned(ap_const_lv11_3FE)) else "0";
    index_fu_227_p4 <= data_V_fu_171_p1(57 downto 52);

    index_table_address0_assign_proc : process(ap_CS_fsm_state3, trunc_ln51_cast1_fu_259_p1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            index_table_address0 <= ap_const_lv64_3F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            index_table_address0 <= trunc_ln51_cast1_fu_259_p1(6 - 1 downto 0);
        else 
            index_table_address0 <= "XXXXXX";
        end if; 
    end process;


    index_table_address1_assign_proc : process(zext_ln488_reg_384, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            index_table_address1 <= zext_ln488_reg_384(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            index_table_address1 <= ap_const_lv64_3E(6 - 1 downto 0);
        else 
            index_table_address1 <= "XXXXXX";
        end if; 
    end process;


    index_table_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            index_table_ce0 <= ap_const_logic_1;
        else 
            index_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    index_table_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            index_table_ce1 <= ap_const_logic_1;
        else 
            index_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    index_table_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, sub_ln51_fu_268_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            index_table_d0 <= ap_const_lv7_34;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            index_table_d0 <= sub_ln51_fu_268_p2;
        else 
            index_table_d0 <= "XXXXXXX";
        end if; 
    end process;


    index_table_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln50_fu_253_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln50_fu_253_p2 = ap_const_lv1_0)))) then 
            index_table_we0 <= ap_const_logic_1;
        else 
            index_table_we0 <= ap_const_logic_0;
        end if; 
    end process;


    index_table_we1_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            index_table_we1 <= ap_const_logic_1;
        else 
            index_table_we1 <= ap_const_logic_0;
        end if; 
    end process;

    mask_table_address0 <= zext_ln488_fu_237_p1(6 - 1 downto 0);

    mask_table_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            mask_table_ce0 <= ap_const_logic_1;
        else 
            mask_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    one_half_1_fu_291_p3 <= 
        add_ln61_fu_286_p2 when (p_Result_s_fu_279_p3(0) = '1') else 
        zext_ln42_reg_404;
    one_half_minus_one_table_address0 <= zext_ln488_fu_237_p1(6 - 1 downto 0);

    one_half_minus_one_table_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            one_half_minus_one_table_ce0 <= ap_const_logic_1;
        else 
            one_half_minus_one_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_41_fu_345_p3 <= (p_Result_40_reg_367 & ap_const_lv63_0);
    p_Result_42_fu_332_p3 <= (tmp_fu_322_p4 & xs_sig_V_fu_316_p2);
    p_Result_s_fu_279_p3 <= data_V_reg_361(to_integer(unsigned(sext_ln773_fu_275_p1)) downto to_integer(unsigned(sext_ln773_fu_275_p1))) when (to_integer(unsigned(sext_ln773_fu_275_p1))>= 0 and to_integer(unsigned(sext_ln773_fu_275_p1))<=63) else "-";
        sext_ln773_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(index_table_q1),32));

    sub_ln51_fu_268_p2 <= std_logic_vector(unsigned(ap_const_lv7_33) - unsigned(zext_ln51_fu_264_p1));
    tmp_38_fu_183_p4 <= data_V_fu_171_p1(62 downto 52);
    tmp_39_fu_193_p1 <= data_V_fu_171_p1(52 - 1 downto 0);
    tmp_40_fu_307_p1 <= data_V_3_fu_302_p2(52 - 1 downto 0);
    tmp_fu_322_p4 <= data_V_3_fu_302_p2(63 downto 52);
    trunc_ln51_cast1_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_149),64));
    xor_ln1302_fu_311_p2 <= (mask_reg_399 xor ap_const_lv52_FFFFFFFFFFFFF);
    xs_sig_V_fu_316_p2 <= (xor_ln1302_fu_311_p2 and tmp_40_fu_307_p1);
    zext_ln42_1_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(one_half_1_fu_291_p3),64));
    zext_ln42_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(one_half_minus_one_table_q0),53));
    zext_ln488_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_fu_227_p4),64));
    zext_ln51_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_149),7));
end behav;
