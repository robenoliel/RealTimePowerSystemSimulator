-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nodalSolver_vetmat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    G_vec_I_0_i : IN STD_LOGIC_VECTOR (31 downto 0);
    G_vec_I_0_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_vec_I_0_o_ap_vld : OUT STD_LOGIC;
    G_vec_I_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    G_vec_I_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_vec_I_1_o_ap_vld : OUT STD_LOGIC;
    G_vec_I_2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    G_vec_I_2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_vec_I_2_o_ap_vld : OUT STD_LOGIC;
    G_vec_V_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_vec_V_0_ap_vld : OUT STD_LOGIC;
    G_vec_V_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_vec_V_1_ap_vld : OUT STD_LOGIC;
    G_vec_V_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_vec_V_2_ap_vld : OUT STD_LOGIC;
    grp_fu_171_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_171_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_171_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_171_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_171_p_ce : OUT STD_LOGIC;
    grp_fu_176_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_176_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_176_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_176_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_176_p_ce : OUT STD_LOGIC;
    grp_fu_181_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_181_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_181_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_181_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_181_p_ce : OUT STD_LOGIC;
    grp_fu_726_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_726_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_726_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_726_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_726_p_ce : OUT STD_LOGIC;
    grp_fu_730_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_730_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_730_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_730_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_730_p_ce : OUT STD_LOGIC;
    grp_fu_734_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_734_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_734_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_734_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_734_p_ce : OUT STD_LOGIC;
    grp_fu_738_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_738_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_738_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_738_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_738_p_ce : OUT STD_LOGIC;
    grp_fu_186_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_186_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_186_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_186_p_ce : OUT STD_LOGIC;
    grp_fu_191_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_191_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_191_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_191_p_ce : OUT STD_LOGIC;
    grp_fu_196_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_196_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_196_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_196_p_ce : OUT STD_LOGIC;
    grp_fu_742_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_742_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_742_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_742_p_ce : OUT STD_LOGIC;
    grp_fu_746_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_746_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_746_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_746_p_ce : OUT STD_LOGIC;
    grp_fu_750_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_750_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_750_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_750_p_ce : OUT STD_LOGIC;
    grp_fu_754_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_754_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_754_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_754_p_ce : OUT STD_LOGIC );
end;


architecture behav of nodalSolver_vetmat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_41200000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001001000000000000000000000";
    constant ap_const_lv32_4191745D : STD_LOGIC_VECTOR (31 downto 0) := "01000001100100010111010001011101";
    constant ap_const_lv32_4191DAC3 : STD_LOGIC_VECTOR (31 downto 0) := "01000001100100011101101011000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal grp_fu_58_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_63_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_reg_159 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_28_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_1_reg_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_68_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_0_1_reg_175 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_33_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_1_1_reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_73_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_1_reg_185 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_38_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_1_0_1_reg_197 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_78_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_0_2_reg_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_42_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_1_1_1_reg_207 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_83_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_2_reg_213 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_88_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_2_2_reg_218 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal grp_fu_46_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_50_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_54_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_28_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_28_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_33_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_33_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_38_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_38_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_42_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_42_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_46_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_46_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_50_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_50_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_54_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_54_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_58_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_58_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_63_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_63_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_68_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_68_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_73_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_73_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_78_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_78_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_83_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_83_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_88_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_88_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_28_ce : STD_LOGIC;
    signal grp_fu_33_ce : STD_LOGIC;
    signal grp_fu_38_ce : STD_LOGIC;
    signal grp_fu_42_ce : STD_LOGIC;
    signal grp_fu_46_ce : STD_LOGIC;
    signal grp_fu_50_ce : STD_LOGIC;
    signal grp_fu_54_ce : STD_LOGIC;
    signal grp_fu_58_ce : STD_LOGIC;
    signal grp_fu_63_ce : STD_LOGIC;
    signal grp_fu_68_ce : STD_LOGIC;
    signal grp_fu_73_ce : STD_LOGIC;
    signal grp_fu_78_ce : STD_LOGIC;
    signal grp_fu_83_ce : STD_LOGIC;
    signal grp_fu_88_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to13 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component nodalSolver_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nodalSolver_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                acc_1_0_1_reg_197 <= grp_fu_181_p_dout0;
                acc_1_1_1_reg_207 <= grp_fu_726_p_dout0;
                acc_1_1_reg_180 <= grp_fu_176_p_dout0;
                acc_1_reg_170 <= grp_fu_171_p_dout0;
                mul_0_1_reg_175 <= grp_fu_196_p_dout0;
                mul_0_2_reg_202 <= grp_fu_746_p_dout0;
                mul_1_1_reg_185 <= grp_fu_742_p_dout0;
                mul_1_2_reg_213 <= grp_fu_750_p_dout0;
                mul_1_reg_159 <= grp_fu_191_p_dout0;
                mul_2_2_reg_218 <= grp_fu_754_p_dout0;
                mul_reg_154 <= grp_fu_186_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    G_vec_I_0_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, G_vec_I_0_i)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            G_vec_I_0_o <= ap_const_lv32_0;
        else 
            G_vec_I_0_o <= G_vec_I_0_i;
        end if; 
    end process;


    G_vec_I_0_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            G_vec_I_0_o_ap_vld <= ap_const_logic_1;
        else 
            G_vec_I_0_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    G_vec_I_1_o_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, G_vec_I_1_i)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            G_vec_I_1_o <= ap_const_lv32_0;
        else 
            G_vec_I_1_o <= G_vec_I_1_i;
        end if; 
    end process;


    G_vec_I_1_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            G_vec_I_1_o_ap_vld <= ap_const_logic_1;
        else 
            G_vec_I_1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    G_vec_I_2_o_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, G_vec_I_2_i)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            G_vec_I_2_o <= ap_const_lv32_0;
        else 
            G_vec_I_2_o <= G_vec_I_2_i;
        end if; 
    end process;


    G_vec_I_2_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            G_vec_I_2_o_ap_vld <= ap_const_logic_1;
        else 
            G_vec_I_2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    G_vec_V_0 <= grp_fu_730_p_dout0;

    G_vec_V_0_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            G_vec_V_0_ap_vld <= ap_const_logic_1;
        else 
            G_vec_V_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    G_vec_V_1 <= grp_fu_734_p_dout0;

    G_vec_V_1_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            G_vec_V_1_ap_vld <= ap_const_logic_1;
        else 
            G_vec_V_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    G_vec_V_2 <= grp_fu_738_p_dout0;

    G_vec_V_2_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            G_vec_V_2_ap_vld <= ap_const_logic_1;
        else 
            G_vec_V_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to13_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to13 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to13)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to13 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_171_p_ce <= ap_const_logic_1;
    grp_fu_171_p_din0 <= mul_reg_154;
    grp_fu_171_p_din1 <= ap_const_lv32_0;
    grp_fu_171_p_opcode <= ap_const_lv2_0;
    grp_fu_176_p_ce <= ap_const_logic_1;
    grp_fu_176_p_din0 <= mul_1_reg_159;
    grp_fu_176_p_din1 <= ap_const_lv32_0;
    grp_fu_176_p_opcode <= ap_const_lv2_0;
    grp_fu_181_p_ce <= ap_const_logic_1;
    grp_fu_181_p_din0 <= acc_1_reg_170;
    grp_fu_181_p_din1 <= mul_0_1_reg_175;
    grp_fu_181_p_opcode <= ap_const_lv2_0;
    grp_fu_186_p_ce <= ap_const_logic_1;
    grp_fu_186_p_din0 <= G_vec_I_0_i;
    grp_fu_186_p_din1 <= ap_const_lv32_41200000;
    grp_fu_191_p_ce <= ap_const_logic_1;
    grp_fu_191_p_din0 <= G_vec_I_0_i;
    grp_fu_191_p_din1 <= ap_const_lv32_0;
    grp_fu_196_p_ce <= ap_const_logic_1;
    grp_fu_196_p_din0 <= G_vec_I_1_i;
    grp_fu_196_p_din1 <= ap_const_lv32_0;
    grp_fu_28_ce <= ap_const_logic_1;
    grp_fu_28_p0 <= mul_reg_154;
    grp_fu_28_p1 <= ap_const_lv32_0;
    grp_fu_28_p2 <= grp_fu_171_p_dout0;
    grp_fu_33_ce <= ap_const_logic_1;
    grp_fu_33_p0 <= mul_1_reg_159;
    grp_fu_33_p1 <= ap_const_lv32_0;
    grp_fu_33_p2 <= grp_fu_176_p_dout0;
    grp_fu_38_ce <= ap_const_logic_1;
    grp_fu_38_p0 <= acc_1_reg_170;
    grp_fu_38_p1 <= mul_0_1_reg_175;
    grp_fu_38_p2 <= grp_fu_181_p_dout0;
    grp_fu_42_ce <= ap_const_logic_1;
    grp_fu_42_p0 <= acc_1_1_reg_180;
    grp_fu_42_p1 <= mul_1_1_reg_185;
    grp_fu_42_p2 <= grp_fu_726_p_dout0;
    grp_fu_46_ce <= ap_const_logic_1;
    grp_fu_46_p0 <= acc_1_0_1_reg_197;
    grp_fu_46_p1 <= mul_0_2_reg_202;
    grp_fu_46_p2 <= grp_fu_730_p_dout0;
    grp_fu_50_ce <= ap_const_logic_1;
    grp_fu_50_p0 <= acc_1_1_1_reg_207;
    grp_fu_50_p1 <= mul_1_2_reg_213;
    grp_fu_50_p2 <= grp_fu_734_p_dout0;
    grp_fu_54_ce <= ap_const_logic_1;
    grp_fu_54_p0 <= acc_1_1_1_reg_207;
    grp_fu_54_p1 <= mul_2_2_reg_218;
    grp_fu_54_p2 <= grp_fu_738_p_dout0;
    grp_fu_58_ce <= ap_const_logic_1;
    grp_fu_58_p0 <= G_vec_I_0_i;
    grp_fu_58_p1 <= ap_const_lv32_41200000;
    grp_fu_58_p2 <= grp_fu_186_p_dout0;
    grp_fu_63_ce <= ap_const_logic_1;
    grp_fu_63_p0 <= G_vec_I_0_i;
    grp_fu_63_p1 <= ap_const_lv32_0;
    grp_fu_63_p2 <= grp_fu_191_p_dout0;
    grp_fu_68_ce <= ap_const_logic_1;
    grp_fu_68_p0 <= G_vec_I_1_i;
    grp_fu_68_p1 <= ap_const_lv32_0;
    grp_fu_68_p2 <= grp_fu_196_p_dout0;
    grp_fu_726_p_ce <= ap_const_logic_1;
    grp_fu_726_p_din0 <= acc_1_1_reg_180;
    grp_fu_726_p_din1 <= mul_1_1_reg_185;
    grp_fu_726_p_opcode <= ap_const_lv2_0;
    grp_fu_730_p_ce <= ap_const_logic_1;
    grp_fu_730_p_din0 <= acc_1_0_1_reg_197;
    grp_fu_730_p_din1 <= mul_0_2_reg_202;
    grp_fu_730_p_opcode <= ap_const_lv2_0;
    grp_fu_734_p_ce <= ap_const_logic_1;
    grp_fu_734_p_din0 <= acc_1_1_1_reg_207;
    grp_fu_734_p_din1 <= mul_1_2_reg_213;
    grp_fu_734_p_opcode <= ap_const_lv2_0;
    grp_fu_738_p_ce <= ap_const_logic_1;
    grp_fu_738_p_din0 <= acc_1_1_1_reg_207;
    grp_fu_738_p_din1 <= mul_2_2_reg_218;
    grp_fu_738_p_opcode <= ap_const_lv2_0;
    grp_fu_73_ce <= ap_const_logic_1;
    grp_fu_73_p0 <= G_vec_I_1_i;
    grp_fu_73_p1 <= ap_const_lv32_4191745D;
    grp_fu_73_p2 <= grp_fu_742_p_dout0;
    grp_fu_742_p_ce <= ap_const_logic_1;
    grp_fu_742_p_din0 <= G_vec_I_1_i;
    grp_fu_742_p_din1 <= ap_const_lv32_4191745D;
    grp_fu_746_p_ce <= ap_const_logic_1;
    grp_fu_746_p_din0 <= G_vec_I_2_i;
    grp_fu_746_p_din1 <= ap_const_lv32_0;
    grp_fu_750_p_ce <= ap_const_logic_1;
    grp_fu_750_p_din0 <= G_vec_I_2_i;
    grp_fu_750_p_din1 <= ap_const_lv32_4191745D;
    grp_fu_754_p_ce <= ap_const_logic_1;
    grp_fu_754_p_din0 <= G_vec_I_2_i;
    grp_fu_754_p_din1 <= ap_const_lv32_4191DAC3;
    grp_fu_78_ce <= ap_const_logic_1;
    grp_fu_78_p0 <= G_vec_I_2_i;
    grp_fu_78_p1 <= ap_const_lv32_0;
    grp_fu_78_p2 <= grp_fu_746_p_dout0;
    grp_fu_83_ce <= ap_const_logic_1;
    grp_fu_83_p0 <= G_vec_I_2_i;
    grp_fu_83_p1 <= ap_const_lv32_4191745D;
    grp_fu_83_p2 <= grp_fu_750_p_dout0;
    grp_fu_88_ce <= ap_const_logic_1;
    grp_fu_88_p0 <= G_vec_I_2_i;
    grp_fu_88_p1 <= ap_const_lv32_4191DAC3;
    grp_fu_88_p2 <= grp_fu_754_p_dout0;
end behav;
